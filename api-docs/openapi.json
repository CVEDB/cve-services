{
  "openapi": "3.0.2",
  "info": {
    "version": "2.1.0",
    "title": "CVE Services API",
    "description": "The CVE services API which supports automation tooling for the CVE Project",
    "contact": {
      "name": "CVE Services",
      "url": "https://cveawg-dev.mitre.org/api",
      "email": "cve-board-auto-list@mitre.org"
    }
  },
  "servers": [
    {
      "url": "https://cveawg-dev.mitre.org/api"
    }
  ],
  "paths": {
    "/cve-id": {
      "get": {
        "tags": [
          "CVE ID"
        ],
        "summary": "Retrieves CVE ID entries after applying the query params as filters (accessible to all registered users)",
        "description": "  <h2>Access Control</h2>  <p>All registered users can access this endpoint</p>  <h2>Expected Behavior</h2>  <p><b>Regular, CNA & Admin Users:</b> Retrieves filtered CVE-IDs owned by the user's organization</p>  <p><b>Secretariat:</b> Retrieves filtered CVE-IDs owned by any organization</p>",
        "operationId": "cveIdGetFiltered",
        "parameters": [
          {
            "$ref": "#/components/parameters/cveIdGetFilteredState"
          },
          {
            "$ref": "#/components/parameters/cveIdGetFilteredCveIdYear"
          },
          {
            "$ref": "#/components/parameters/cveIdGetFilteredTimeReservedLt"
          },
          {
            "$ref": "#/components/parameters/cveIdGetFilteredTimeReservedGt"
          },
          {
            "$ref": "#/components/parameters/cveIdGetFilteredTimeModifiedLt"
          },
          {
            "$ref": "#/components/parameters/cveIdGetFilteredTimeModifiedGt"
          },
          {
            "$ref": "#/components/parameters/pageQuery"
          },
          {
            "$ref": "#/components/parameters/apiEntityHeader"
          },
          {
            "$ref": "#/components/parameters/apiUserHeader"
          },
          {
            "$ref": "#/components/parameters/apiSecretHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "A filtered list of CVE-ID records the organization owns given the query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/cve-id/list-cve-ids-response.json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/bad-request.json"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CVE ID"
        ],
        "summary": "Reserves CVE-IDs for the organization provided in the short_name query parameter (accessible to CNAs and Secretariat)",
        "description": "  <h2>Access Control</h2>  <p>User must belong to an organization with the <b>CNA</b> or <b>Secretariat</b> role</p>  <h2>Expected Behavior</h2>  <p><b>CNA:</b> Reserves CVE-IDs for the CNA's organization</p>  <p><b>Secretariat:</b> Reserves CVE-IDs for any organization</p>",
        "operationId": "cveIdReserve",
        "parameters": [
          {
            "$ref": "#/components/parameters/amount"
          },
          {
            "$ref": "#/components/parameters/batch_type"
          },
          {
            "$ref": "#/components/parameters/cve_year"
          },
          {
            "$ref": "#/components/parameters/short_name"
          },
          {
            "$ref": "#/components/parameters/apiEntityHeader"
          },
          {
            "$ref": "#/components/parameters/apiUserHeader"
          },
          {
            "$ref": "#/components/parameters/apiSecretHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the newly reserved CVE-IDs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/cve-id/create-cve-ids-response.json"
                }
              }
            }
          },
          "206": {
            "description": "A partial list of the CVE-IDs the IDR service managed to reserve before encountering a case where no more CVE IDs could be reserved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/cve-id/create-cve-ids-partial-response.json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/bad-request.json"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          }
        }
      }
    },
    "/cve-id/{id}": {
      "get": {
        "tags": [
          "CVE ID"
        ],
        "summary": "Retrieves a CVE-ID entry for the specified id (acessible to all registered users)",
        "description": "  <h2>Access Control</h2>  <p>All registered users can access this endpoint</p>  <h2>Expected Behavior</h2>  <p><b>Regular, CNA & Admin Users: </b>Retrieves full information for a CVE-ID owned by their organization; partial information for a CVE-ID in the “PUBLISHED” or “REJECTED” state owned by other organizations</p>  <p><b>Secretariat: </b>Retrieves full information for a CVE-ID owned by any organization</p>",
        "operationId": "cveIdGetSingle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The CVE ID for which the record is being submitted."
          },
          {
            "$ref": "#/components/parameters/apiEntityHeader"
          },
          {
            "$ref": "#/components/parameters/apiUserHeader"
          },
          {
            "$ref": "#/components/parameters/apiSecretHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested CVE-ID record is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/cve-id/get-cve-id-response.json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/bad-request.json"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CVE ID"
        ],
        "summary": "Updates the CVE-ID entry for the specified id (accessible to CNAs and Secretariat)",
        "description": "  <h2>Access Control</h2>  <p>User must belong to an organization with the <b>CNA</b> or <b>Secretariat</b> role</p>  <h2>Expected Behavior</h2>  <p><b>CNA:</b> Updates a CVE-ID entry owned by the CNA's organization</p>  <p><b>Secretariat:</b> Updates a CVE-ID entry owned by any organization</p>",
        "operationId": "cveIdUpdateSingle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The CVE ID for which the record is being submitted."
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/state"
          },
          {
            "$ref": "#/components/parameters/apiEntityHeader"
          },
          {
            "$ref": "#/components/parameters/apiUserHeader"
          },
          {
            "$ref": "#/components/parameters/apiSecretHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The updated CVE-ID record is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/cve-id/get-cve-id-response.json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/bad-request.json"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          }
        }
      }
    },
    "/cve-id-range/{year}": {
      "post": {
        "tags": [
          "CVE ID"
        ],
        "summary": "Creates a CVE-ID-Range entry for the specified year (accessible to Secretariat)",
        "description": "  <h2>Access Control</h2>  <p>User must belong to an organization with the <b>Secretariat</b> role</p>  <h2>Expected Behavior</h2>  <p><b>Secretariat:</b> Creates a CVE-ID-Range entry for the specified year</p>",
        "operationId": "cveIdRangeCreate",
        "parameters": [
          {
            "name": "year",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The year of the CVE-ID-Range record."
          },
          {
            "$ref": "#/components/parameters/apiEntityHeader"
          },
          {
            "$ref": "#/components/parameters/apiUserHeader"
          },
          {
            "$ref": "#/components/parameters/apiSecretHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The CVE-ID-Range entity was created."
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/bad-request.json"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          }
        }
      }
    },
    "/cve/{id}": {
      "get": {
        "tags": [
          "CVE Record"
        ],
        "summary": "Returns a CVE record by CVE ID (accessible to all users)",
        "description": "  <h2>Access Control</h2>  <p>Endpoint is accessible to all</p>  <h2>Expected Behavior</h2>  <p><b>All users:</b> Retrieves the CVE record specified</p>",
        "operationId": "cveGetSingle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The CVE ID for the record to be retrieved."
          },
          {
            "$ref": "#/components/parameters/apiEntityHeader"
          },
          {
            "$ref": "#/components/parameters/apiUserHeader"
          },
          {
            "$ref": "#/components/parameters/apiSecretHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested CVE record is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/cve/cve-record-minimum-request.json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/bad-request.json"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CVE Record"
        ],
        "summary": "Creates a CVE Record from full CVE Record JSON for the specified ID (accessible to Secretariat.)",
        "description": "  <h2>Access Control</h2>  <p>User must belong to an organization with the <b>Secretariat</b> role</p>  <h2>Expected Behavior</h2>  <p><b>Secretariat:</b> Creates a CVE record for any organization</p>",
        "operationId": "cveSubmit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The CVE ID for which the record is being submitted."
          },
          {
            "$ref": "#/components/parameters/apiEntityHeader"
          },
          {
            "$ref": "#/components/parameters/apiUserHeader"
          },
          {
            "$ref": "#/components/parameters/apiSecretHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested CVE record is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/cve/create-cve-record-response.json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/bad-request.json"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "/schemas/cve/cve-record-minimum-request.json"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CVE Record"
        ],
        "summary": "Updates a CVE Record from full CVE Record JSON for the specified ID (accessible to Secretariat.)",
        "description": "  <h2>Access Control</h2>  <p>User must belong to an organization with the <b>Secretariat</b> role</p>  <h2>Expected Behavior</h2>  <p><b>Secretariat:</b> Updates a CVE record for any organization</p>",
        "operationId": "cveUpdateSingle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The CVE ID for which the record is being updated."
          },
          {
            "$ref": "#/components/parameters/apiEntityHeader"
          },
          {
            "$ref": "#/components/parameters/apiUserHeader"
          },
          {
            "$ref": "#/components/parameters/apiSecretHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the CVE record updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/cve/update-cve-record-response.json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/bad-request.json"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "/schemas/cve/cve-record-minimum-request.json"
              }
            }
          }
        }
      }
    },
    "/cve": {
      "get": {
        "tags": [
          "CVE Record"
        ],
        "summary": "Retrieves all CVE records (accessible to all users)",
        "description": "  <h2>Access Control</h2>  <p>Endpoint is accessible to all</p>  <h2>Expected Behavior</h2>  <p><b>All users:</b> Retrieves all CVE records for all organizations</p>",
        "operationId": "cveGetFiltered",
        "parameters": [
          {
            "$ref": "#/components/parameters/cveRecordFilteredTimeModifiedLt"
          },
          {
            "$ref": "#/components/parameters/cveRecordFilteredTimeModifiedGt"
          },
          {
            "$ref": "#/components/parameters/cveState"
          },
          {
            "$ref": "#/components/parameters/countOnly"
          },
          {
            "$ref": "#/components/parameters/assignerShortName"
          },
          {
            "$ref": "#/components/parameters/assigner"
          },
          {
            "$ref": "#/components/parameters/apiEntityHeader"
          },
          {
            "$ref": "#/components/parameters/apiUserHeader"
          },
          {
            "$ref": "#/components/parameters/apiSecretHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of CVE records and pagination fields, only allowed by the Secretariat.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/cve/list-cve-records-response.json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/bad-request.json"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          }
        }
      }
    },
    "/cve/{id}/cna": {
      "post": {
        "tags": [
          "CVE Record"
        ],
        "summary": "Creates a CVE Record from CNA Container JSON for the specified ID (accessible to CNAs and Secretariat)",
        "description": "  <h2>Access Control</h2>  <p>User must belong to an organization with the <b>CNA</b> or <b>Secretariat</b> role</p>  <h2>Expected Behavior</h2>  <p><b>CNA:</b> Creates CVE record for a CVE ID owned by their organization</p>  <p><b>Secretariat:</b> Creates CVE record for CVE IDs owned by any organization</p>",
        "operationId": "cveCnaCreateSingle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The CVE ID for which the record is being created."
          },
          {
            "$ref": "#/components/parameters/apiEntityHeader"
          },
          {
            "$ref": "#/components/parameters/apiUserHeader"
          },
          {
            "$ref": "#/components/parameters/apiSecretHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested CVE record is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/cve/create-cve-record-response.json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/bad-request.json"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "/schemas/cve/cve-record-minimum-request.json"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CVE Record"
        ],
        "summary": "Updates the CVE Record from CNA Container JSON for the specified ID (accessible to CNAs and Secretariat)",
        "description": "  <h2>Access Control</h2>  <p>User must belong to an organization with the <b>CNA</b> or <b>Secretariat</b> role</p>  <h2>Expected Behavior</h2>  <p><b>CNA:</b> Updates a CVE record for records that are owned by their organization</p>  <p><b>Secretariat:</b> Updates a CVE record for records that are owned by any organization</p>",
        "operationId": "cveCnaUpdateSingle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The CVE ID for which the record is being updated."
          },
          {
            "$ref": "#/components/parameters/apiEntityHeader"
          },
          {
            "$ref": "#/components/parameters/apiUserHeader"
          },
          {
            "$ref": "#/components/parameters/apiSecretHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the CVE record updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/cve/update-cve-record-response.json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/bad-request.json"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "/schemas/cve/cve-record-minimum-request.json"
              }
            }
          }
        }
      }
    },
    "/cve/{id}/reject": {
      "post": {
        "tags": [
          "CVE Record"
        ],
        "summary": "Creates a reject CVE Record for the specified ID if no record yet exists (accessible to CNAs and Secretariat)",
        "description": "  <h2>Access Control</h2>  <p>User must belong to an organization with the <b>CNA</b> or <b>Secretariat</b> role</p>  <h2>Expected Behavior</h2>  <p><b>CNA:</b> Creates a reject CVE record for a record owned by their organization</p>  <p><b>Secretariat:</b> Creates a reject CVE record for a record owned by any organization</p>",
        "operationId": "cveCnaCreateReject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The CVE ID for which the record is being rejected."
          },
          {
            "$ref": "#/components/parameters/apiEntityHeader"
          },
          {
            "$ref": "#/components/parameters/apiUserHeader"
          },
          {
            "$ref": "#/components/parameters/apiSecretHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the CVE record updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/cve/create-cve-record-rejection-response.json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/bad-request.json"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "/schemas/cve/create-cve-record-rejection-request.json"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CVE Record"
        ],
        "summary": "Updates an existing CVE Record with a reject record for the specified ID (accessible to CNAs and Secretariat)",
        "description": "  <h2>Access Control</h2>  <p>User must belong to an organization with the <b>CNA</b> or <b>Secretariat</b> role</p>  <h2>Expected Behavior</h2>  <p><b>CNA:</b> Updates a reject CVE record for a record owned by their organization</p>  <p><b>Secretariat:</b> Updates a reject CVE record for a record owned by any organization</p>",
        "operationId": "cveCnaUpdateReject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The CVE ID for which the record is being rejected."
          },
          {
            "$ref": "#/components/parameters/apiEntityHeader"
          },
          {
            "$ref": "#/components/parameters/apiUserHeader"
          },
          {
            "$ref": "#/components/parameters/apiSecretHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the CVE record updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/cve/update-cve-record-rejection-response.json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/bad-request.json"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "/schemas/cve/update-cve-record-rejection-request.json"
              }
            }
          }
        }
      }
    },
    "/org": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Retrieves all organization entries (accessible to Secretariat)",
        "description": "  <h2>Access Control</h2>  <p>User must belong to an organization with the <b>Secretariat</b> role</p>  <h2>Expected Behavior</h2>  <p><b>Secretariat:</b> Retrieves all organization entries</p>",
        "operationId": "orgAll",
        "parameters": [
          {
            "$ref": "#/components/parameters/pageQuery"
          },
          {
            "$ref": "#/components/parameters/apiEntityHeader"
          },
          {
            "$ref": "#/components/parameters/apiUserHeader"
          },
          {
            "$ref": "#/components/parameters/apiSecretHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all organization entries.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/org/list-orgs-response.json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/bad-request.json"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Creates an organization entry as specified in the request body (accessible to Secretariat)",
        "description": "  <h2>Access Control</h2>  <p>User must belong to an organization with the <b>Secretariat</b> role</p>  <h2>Expected Behavior</h2>  <p><b>Secretariat:</b> Creates an organization entry</p>  ",
        "operationId": "orgCreateSingle",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiEntityHeader"
          },
          {
            "$ref": "#/components/parameters/apiUserHeader"
          },
          {
            "$ref": "#/components/parameters/apiSecretHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the organization entry created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/org/create-org-response.json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/bad-request.json"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "/schemas/org/create-org-request.json"
              }
            }
          }
        }
      }
    },
    "/org/{identifier}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Retrieves the organization entry for the specified short name or UUID (accessible to all registered users)",
        "description": "  <h2>Access Control</h2>  <p>All registered users can access this endpoint</p>  <h2>Expected Behavior</h2>  <p><b>Regular, CNA & Admin Users:</b> Retrieves organization record for the specified short name or UUID if it is the user's organization</p>  <p><b>Secretariat:</b> Retrieves any organization entry</p>",
        "operationId": "orgSingle",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The short name or UUID of the organization"
          },
          {
            "$ref": "#/components/parameters/apiEntityHeader"
          },
          {
            "$ref": "#/components/parameters/apiUserHeader"
          },
          {
            "$ref": "#/components/parameters/apiSecretHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the organization entry.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/org/get-org-response.json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/bad-request.json"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          }
        }
      }
    },
    "/org/{shortname}": {
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Updates an organization entry for the specified organization short name (accessible to Secretariat)",
        "description": "  <h2>Access Control</h2>  <p>User must belong to an organization with the <b>Secretariat</b> role</p>  <h2>Expected Behavior</h2>  <p><b>Secretariat:</b> Updates any organization's information</p>",
        "operationId": "orgUpdateSingle",
        "parameters": [
          {
            "name": "shortname",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The short name of the organization"
          },
          {
            "$ref": "#/components/parameters/id_quota"
          },
          {
            "$ref": "#/components/parameters/name"
          },
          {
            "$ref": "#/components/parameters/newShortname"
          },
          {
            "$ref": "#/components/parameters/active_roles_add"
          },
          {
            "$ref": "#/components/parameters/active_roles_remove"
          },
          {
            "$ref": "#/components/parameters/apiEntityHeader"
          },
          {
            "$ref": "#/components/parameters/apiUserHeader"
          },
          {
            "$ref": "#/components/parameters/apiSecretHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the organization entry updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/org/update-org-response.json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/bad-request.json"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          }
        }
      }
    },
    "/org/{shortname}/id_quota": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Retrieves an organization's CVE ID quota information (accessible to all registered users)",
        "description": "  <h2>Access Control</h2>  <p>All registered users can access this endpoint</p>  <h2>Expected Behavior</h2>  <p><b>Regular, CNA & Admin Users:</b> Retrieves CVE ID quota information for user's organization</p>  <p><b>Secretariat:</b> Retrieves CVE ID quota information of any organization</p>",
        "operationId": "orgIdQuota",
        "parameters": [
          {
            "name": "shortname",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The short name of the organization."
          },
          {
            "$ref": "#/components/parameters/apiEntityHeader"
          },
          {
            "$ref": "#/components/parameters/apiUserHeader"
          },
          {
            "$ref": "#/components/parameters/apiSecretHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns CVE ID quota details of an organization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/org/get-org-quota-response.json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/bad-request.json"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          }
        }
      }
    },
    "/org/{shortname}/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieves all users for the organization with the specified short name (accessible to all registered users)",
        "description": "  <h2>Access Control</h2>  <p>All registered users can access this endpoint</p>  <h2>Expected Behavior</h2>  <p><b>Regular, CNA & Admin Users:</b> Retrieves information for users in the same organization</p>  <p><b>Secretariat:</b> Retrieves all user information from any organization</p>",
        "operationId": "userOrgAll",
        "parameters": [
          {
            "name": "shortname",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The short name of the organization."
          },
          {
            "$ref": "#/components/parameters/pageQuery"
          },
          {
            "$ref": "#/components/parameters/apiEntityHeader"
          },
          {
            "$ref": "#/components/parameters/apiUserHeader"
          },
          {
            "$ref": "#/components/parameters/apiSecretHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all user entries for the organization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/user/list-users-response.json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/bad-request.json"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          }
        }
      }
    },
    "/org/{shortname}/user": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a user entry with the provided short name as the owning organization (accessible to Admins and Secretariats)",
        "description": "  <h2>Access Control</h2>  <p>User must belong to an organization with the <b>Secretariat</b> role or be an <b>Admin</b> of the organization</p>  <h2>Expected Behavior</h2>  <p><b>Admin User:</b> Creates a user entry for the Admin's organization</p>  <p><b>Secretariat:</b> Creates a user entry for any organization</p>",
        "operationId": "userCreateSingle",
        "parameters": [
          {
            "name": "shortname",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The short name of the organization."
          },
          {
            "$ref": "#/components/parameters/pageQuery"
          },
          {
            "$ref": "#/components/parameters/apiEntityHeader"
          },
          {
            "$ref": "#/components/parameters/apiUserHeader"
          },
          {
            "$ref": "#/components/parameters/apiSecretHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the created user entry (with the secret).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/user/create-user-response.json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/bad-request.json"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "/schemas/user/create-user-request.json"
              }
            }
          }
        }
      }
    },
    "/org/{shortname}/user/{username}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieves a user entry for the specified username and organization short name (accessible to all registered users)",
        "description": "  <h2>Access Control</h2>  <p>All registered users can access this endpoint</p>  <h2>Expected Behavior</h2>  <p><b>Regular, CNA & Admin Users:</b> Retrieves information for a user in the same organization</p>  <p><b>Secretariat:</b> Retrieves any user's information</p>",
        "operationId": "userSingle",
        "parameters": [
          {
            "name": "shortname",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The short name of the organization."
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The user name of the user."
          },
          {
            "$ref": "#/components/parameters/apiEntityHeader"
          },
          {
            "$ref": "#/components/parameters/apiUserHeader"
          },
          {
            "$ref": "#/components/parameters/apiSecretHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns user entry details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/user/get-user-response.json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/bad-request.json"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates a user entry for the specified username and organization shortname (accessible to all registered users)",
        "description": "  <h2>Access Control</h2>  <p>All registered users can access this endpoint</p>  <h2>Expected Behavior</h2>  <p><b>Regular User:</b> Updates a user's own user entry</p>  <p><b>Admin User:</b> Updates a user entry for users in the Admin's organization</p>  <p><b>Secretariat:</b> Updates a user entry in any organization</p>",
        "operationId": "userUpdateSingle",
        "parameters": [
          {
            "name": "shortname",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The short name of the organization."
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The user name of the user."
          },
          {
            "$ref": "#/components/parameters/active"
          },
          {
            "$ref": "#/components/parameters/activeUserRolesAdd"
          },
          {
            "$ref": "#/components/parameters/activeUserRolesRemove"
          },
          {
            "$ref": "#/components/parameters/nameFirst"
          },
          {
            "$ref": "#/components/parameters/nameLast"
          },
          {
            "$ref": "#/components/parameters/nameMiddle"
          },
          {
            "$ref": "#/components/parameters/nameSuffix"
          },
          {
            "$ref": "#/components/parameters/newUsername"
          },
          {
            "$ref": "#/components/parameters/orgShortname"
          },
          {
            "$ref": "#/components/parameters/apiEntityHeader"
          },
          {
            "$ref": "#/components/parameters/apiUserHeader"
          },
          {
            "$ref": "#/components/parameters/apiSecretHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated user entry.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/user/update-user-response.json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/bad-request.json"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          }
        }
      }
    },
    "/org/{shortname}/user/{username}/reset_secret": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Reset the API key for a user (accessible to all registered users)",
        "description": "  <h2>Access Control</h2>  <p>All registered users can access this endpoint</p>  <h2>Expected Behavior</h2>  <p><b>Regular User:</b> Resets user's own API secret</p>  <p><b>Admin User:</b> Resets any user's API secret in the Admin's organization</p>  <p><b>Secretariat:</b> Resets any user's API secret</p>",
        "operationId": "userResetSecret",
        "parameters": [
          {
            "name": "shortname",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The short name of the organization."
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The user name of the user."
          },
          {
            "$ref": "#/components/parameters/apiEntityHeader"
          },
          {
            "$ref": "#/components/parameters/apiUserHeader"
          },
          {
            "$ref": "#/components/parameters/apiSecretHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the new API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/user/reset-secret-response.json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/bad-request.json"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieves information for all registered users (accessible to Secretariat)",
        "description": "  <h2>Access Control</h2>  <p> User must belong to an organization with the <b>Secretariat</b> role</p>  <h2>Expected Behavior</h2>  <p><b>Secretariat:</b> Retrieves information of all users from any organization</p>",
        "operationId": "userAll",
        "parameters": [
          {
            "$ref": "#/components/parameters/pageQuery"
          },
          {
            "$ref": "#/components/parameters/apiEntityHeader"
          },
          {
            "$ref": "#/components/parameters/apiUserHeader"
          },
          {
            "$ref": "#/components/parameters/apiSecretHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/user/list-users-response.json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/bad-request.json"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                },
                "examples": {
                  "errorGeneric": {
                    "$ref": "#/components/examples/errorGeneric"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "/schemas/errors/generic.json"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "active": {
        "in": "query",
        "name": "active",
        "description": "Update the active state of the user record",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "active_roles_add": {
        "in": "query",
        "name": "active_roles.add",
        "description": "Add an active role to the organization",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "CNA",
            "SECRETARIAT",
            "ROOT_CNA",
            "ADP"
          ]
        }
      },
      "active_roles_remove": {
        "in": "query",
        "name": "active_roles.remove",
        "description": "Remove an active role from the organization",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "CNA",
            "SECRETARIAT",
            "ROOT_CNA",
            "ADP"
          ]
        }
      },
      "activeUserRolesAdd": {
        "in": "query",
        "name": "active_roles.add",
        "description": "Add an active role to the user",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "ADMIN"
          ]
        }
      },
      "activeUserRolesRemove": {
        "in": "query",
        "name": "active_roles.remove",
        "description": "Remove an active role from the user",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "ADMIN"
          ]
        }
      },
      "apiEntityHeader": {
        "in": "header",
        "name": "CVE-API-ORG",
        "description": "The shortname for the entity (e.g., CNA, ADP) that is authenticated or requesting authentication",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "apiUserHeader": {
        "in": "header",
        "name": "CVE-API-USER",
        "description": "The username for the account that is making the request",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "apiSecretHeader": {
        "in": "header",
        "name": "CVE-API-KEY",
        "description": "The user's API key",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "amount": {
        "in": "query",
        "name": "amount",
        "description": "Amount of CVE IDs to reserve",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "assigner": {
        "in": "query",
        "name": "assigner",
        "description": "Specify the UUID for the org to which the cve id was assigned",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "assignerShortName": {
        "in": "query",
        "name": "assignerShortName",
        "description": "Get the short name for the org to which the cve id was assigned",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "batch_type": {
        "in": "query",
        "name": "batch_type",
        "description": "When the amount is greater than one, it indicates whether the CVE IDs should be sequential or non-sequential",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "sequential",
            "non-sequential"
          ]
        }
      },
      "countOnly": {
        "in": "query",
        "name": "count_only",
        "description": "Get count of records that match query. Accepted values are 0 and 1, representing False and True, respectively",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "cveState": {
        "in": "query",
        "name": "state",
        "description": "Filter by CVE state",
        "schema": {
          "type": "string",
          "enum": [
            "PUBLISHED",
            "REJECTED"
          ]
        }
      },
      "cve_year": {
        "in": "query",
        "name": "cve_year",
        "description": "The year the CVE IDs will be reserved for. (i.e., 1999, ..., currentYear + 1)",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "cveIdGetFilteredState": {
        "in": "query",
        "name": "state",
        "description": "Filter by CVE state [RESERVED, PUBLISHED, REJECTED]",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "cveIdGetFilteredCveIdYear": {
        "in": "query",
        "name": "cve_id_year",
        "description": "Filter by the year in the CVE ID (YYYY)",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "cveIdGetFilteredTimeReservedLt": {
        "in": "query",
        "name": "time_reserved.lt",
        "description": "Get all CVE-ID records reserved before timestamp",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "cveIdGetFilteredTimeReservedGt": {
        "in": "query",
        "name": "time_reserved.gt",
        "description": "Get all CVE-ID records reserved after timestamp",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "cveIdGetFilteredTimeModifiedLt": {
        "in": "query",
        "name": "time_modified.lt",
        "description": "Get all CVE-ID records modified before timestamp",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "cveIdGetFilteredTimeModifiedGt": {
        "in": "query",
        "name": "time_modified.gt",
        "description": "Get all CVE-ID records modified after timestamp",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "cveRecordFilteredTimeModifiedLt": {
        "in": "query",
        "name": "time_modified.lt",
        "description": "Get all CVE records modified before timestamp",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "cveRecordFilteredTimeModifiedGt": {
        "in": "query",
        "name": "time_modified.gt",
        "description": "Get all CVE records modified after timestamp",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "id_quota": {
        "in": "query",
        "name": "id_quota",
        "description": "The new number of CVE IDs the organization is allowed to have in the RESERVED state at one time",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "maximum": 100000
        }
      },
      "name": {
        "in": "query",
        "name": "name",
        "description": "The new name for the organization",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "nameFirst": {
        "in": "query",
        "name": "name.first",
        "description": "Update the first name of the user record",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "nameLast": {
        "in": "query",
        "name": "name.last",
        "description": "Update the last name of the user record",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "nameMiddle": {
        "in": "query",
        "name": "name.middle",
        "description": "Update the middle name of the user record",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "nameSuffix": {
        "in": "query",
        "name": "name.suffix",
        "description": "Update suffix of the user record",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "newShortname": {
        "in": "query",
        "name": "shortname",
        "description": "The new shortname for the organization",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "newUsername": {
        "in": "query",
        "name": "new_username",
        "description": "Update the user name of the user record",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "org": {
        "in": "query",
        "name": "org",
        "description": "Update the owning_cna of a CVE-ID record",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "orgShortname": {
        "in": "query",
        "name": "org_shortname",
        "description": "Update the organization the user belongs to",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "pageQuery": {
        "in": "query",
        "name": "page",
        "description": "The current page in the paginator",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1
        }
      },
      "short_name": {
        "in": "query",
        "name": "short_name",
        "description": "The CNA that will own the CVE IDs reserved",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "shortname": {
        "in": "query",
        "name": "shortname",
        "description": "Update the short name of the organization",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "state": {
        "in": "query",
        "name": "state",
        "description": "Update the state of a CVE-ID record",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    }
  }
}
