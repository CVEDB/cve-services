const express = require('express')
const app = express()
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))

// Body Parser Middleware
app.use(express.json()) // Allows us to handle raw JSON data
app.use(express.urlencoded({ extended: false })) // Allows us to handle url encoded data
const middleware = require('../../../src/middleware/middleware')
app.use(middleware.createCtxAndReqUUID)

const CONSTANTS = require('../../../src/constants')
const errors = require('../../../src/middleware/error')
const error = new errors.MiddlewareError()
const repos = require('../../../test-utils/repositories')

const mwFixtures = require('./mockObjects.middleware')
const cveId5 = 'CVE-2017-4024'
const cvePass5 = require('../../schemas/5.0/' + cveId5 + '_public.json')
const cveFail5 = require('../../schemas/5.0/' + cveId5 + '_fail.json')
const cveRejectFail5 = require('../../schemas/5.0/' + cveId5 + '_reject_fail.json')
const cveReservedFail5 = require('../../schemas/5.0/' + cveId5 + '_reserved_fail.json')
const cvePublicFail5 = require('../../schemas/5.0/' + cveId5 + '_public_fail.json')
const cveId4 = 'CVE-2017-5832'
const cvePass4 = require('../../schemas/4.0/' + cveId4 + '_public.json')
const cveFail4 = require('../../schemas/4.0/' + cveId4 + '_fail.json')
const cveRejectFail4 = require('../../schemas/4.0/' + cveId4 + '_reject_fail.json')
const cveReservedFail4 = require('../../schemas/4.0/' + cveId4 + '_reserved_fail.json')
const cvePublicFail4 = require('../../schemas/4.0/' + cveId4 + '_public_fail.json')

// validate json schema 5.0
app.route('/api/test/mw/schema5')
  .post(middleware.validateCveJsonSchema, (req, res) => {
    return res.status(200).json({ message: 'Success! You have reached the target endpoint.' })
  })

// validate json schema 4.0
app.route('/api/test/mw/schema4')
  .post(middleware.validateCveJsonSchema, (req, res) => {
    return res.status(200).json({ message: 'Success! You have reached the target endpoint.' })
  })

describe('Test for middleware', () => {
  context('Validate JSON schema 5.0', () => {
    it('Json validator pass', (done) => {
      chai.request(app)
        .post('/api/test/mw/schema5')
        .set(mwFixtures.secretariatHeaders)
        .send(cvePass5)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Success! You have reached the target endpoint.')
          done()
        })
    })

    it('Json validator fails because the STATE is invalid', (done) => {
      chai.request(app)
        .post('/api/test/mw/schema5')
        .set(mwFixtures.secretariatHeaders)
        .send(cveFail5)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CVE JSON schema validation FAILED.')
          expect(res.body.details).to.have.property('errors').and.to.be.an('array')
          expect(res.body.details.errors[0]).to.have.string('CVE_data_meta.STATE is not one of enum values')
          done()
        })
    })

    it('Json validator fails in REJECT state', (done) => {
      chai.request(app)
        .post('/api/test/mw/schema5')
        .set(mwFixtures.secretariatHeaders)
        .send(cveRejectFail5)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.property('status', 400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CVE JSON schema validation FAILED.')
          expect(res.body.details).to.have.property('errors').to.be.an('array')
          expect(res.body.details.errors[0]).to.have.string('instance.descriptions[0] requires property "lang"')
          done()
        })
    })

    it('Json validator fails in RESERVED state', (done) => {
      chai.request(app)
        .post('/api/test/mw/schema5')
        .set(mwFixtures.secretariatHeaders)
        .send(cveReservedFail5)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.property('status', 400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CVE JSON schema validation FAILED.')
          expect(res.body.details).to.have.property('errors').to.be.an('array')
          expect(res.body.details.errors[0]).to.have.string('value does not meet minimum length of 1')
          expect(res.body.details.errors[1]).to.have.string('instance.descriptions[0] requires property "lang"')
          done()
        })
    })

    it('Json validator fails in PUBLIC state', (done) => {
      chai.request(app)
        .post('/api/test/mw/schema5')
        .set(mwFixtures.secretariatHeaders)
        .send(cvePublicFail5)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CVE JSON schema validation FAILED.')
          expect(res.body.details).to.have.property('errors').and.to.be.an('array')
          expect(res.body.details.errors[0]).to.have.string('CNA.provider_data_meta.ID is not of a type(s) string')
          expect(res.body.details.errors[1]).to.have.string('CNA.affected.vendors[0].products[0].versions[0].version_affected is not one of enum values')
          expect(res.body.details.errors[2]).to.have.string('CNA.affected.affects_SWID does not meet minimum length of 1')
          expect(res.body.details.errors[3]).to.have.string('CNA.problemtypes contains duplicate item')
          expect(res.body.details.errors[4]).to.have.string('additionalProperty "additional" exists in instance when not allowed')
          done()
        })
    })
  })

  context('Validate JSON schema 4.0', () => {
    it('Json validator pass', (done) => {
      chai.request(app)
        .post('/api/test/mw/schema4')
        .set(mwFixtures.secretariatHeaders)
        .send(cvePass4)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Success! You have reached the target endpoint.')
          done()
        })
    })

    it('Json validator fails because the STATE is invalid', (done) => {
      chai.request(app)
        .post('/api/test/mw/schema4')
        .set(mwFixtures.secretariatHeaders)
        .send(cveFail4)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CVE JSON schema validation FAILED.')
          expect(res.body.details).to.have.property('errors').and.to.be.an('array')
          expect(res.body.details.errors[0]).to.have.string('CVE_data_meta.STATE is not one of enum values')
          done()
        })
    })

    it('Json validator fails in REJECT state', (done) => {
      chai.request(app)
        .post('/api/test/mw/schema4')
        .set(mwFixtures.secretariatHeaders)
        .send(cveRejectFail4)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.property('status', 400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CVE JSON schema validation FAILED.')
          expect(res.body.details).to.have.property('errors').to.be.an('array')
          expect(res.body.details.errors[0]).to.have.string('instance.description.description_data[0] requires property "lang"')
          done()
        })
    })

    it('Json validator fails in RESERVED state', (done) => {
      chai.request(app)
        .post('/api/test/mw/schema4')
        .set(mwFixtures.secretariatHeaders)
        .send(cveReservedFail4)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.property('status', 400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CVE JSON schema validation FAILED.')
          expect(res.body.details).to.have.property('errors').to.be.an('array')
          expect(res.body.details.errors[0]).to.have.string('instance.description.description_data does not meet minimum length of 1')
          done()
        })
    })

    it('Json validator fails in PUBLIC state', (done) => {
      chai.request(app)
        .post('/api/test/mw/schema4')
        .set(mwFixtures.secretariatHeaders)
        .send(cvePublicFail4)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CVE JSON schema validation FAILED.')
          expect(res.body.details).to.have.property('errors').and.to.be.an('array')
          expect(res.body.details.errors[0]).to.have.string('instance.affects.vendor.vendor_data[0].product.product_data[0].version.version_data[0] requires property "version_value"')
          expect(res.body.details.errors[1]).to.have.string('instance.affects.vendor.vendor_data[0].product.product_data[1] requires property "version"')
          expect(res.body.details.errors[2]).to.have.string('instance.problemtype.problemtype_data[0].description[0] requires property "lang"')
          expect(res.body.details.errors[3]).to.have.string('instance.description.description_data is not of a type(s) array')
          done()
        })
    })
  })

  context('Validate user', function () {
    it('User is successfully validated', function (done) {
      app.route('/validate-user-successful')
        .post((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.OrgValidateUserSuccess() },
            getUserRepository: () => { return new repos.UserValidateUserSuccess() }
          }
          req.ctx.repositories = factory
          next()
        }, middleware.validateUser, (req, res) => {
          return res.status(200).json({ message: 'Success! You have reached the target endpoint.' })
        })

      chai.request(app)
        .post('/validate-user-successful')
        .set(mwFixtures.secretariatHeaders)
        .send(cvePass5)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Success! You have reached the target endpoint.')
          done()
        })
    })

    it('Org does not exist', function (done) {
      app.route('/validate-user-org-doesnt-exist')
        .post((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.NullOrgRepo() },
            getUserRepository: () => { return new repos.NullUserRepo() }
          }
          req.ctx.repositories = factory
          next()
        }, middleware.validateUser, (req, res) => {
          return res.status(200).json({ message: 'Success! You have reached the target endpoint.' })
        })

      const testHeaders = Object.assign({}, mwFixtures.secretariatHeaders)
      testHeaders[CONSTANTS.AUTH_HEADERS.ORG] = 'jpmorgan'

      chai.request(app)
        .post('/validate-user-org-doesnt-exist')
        .set(testHeaders)
        .send(cvePass5)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(401)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.unauthorized()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('User is not found', function (done) {
      app.route('/validate-user-user-not-found')
        .post((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.NullOrgRepo() },
            getUserRepository: () => { return new repos.NullUserRepo() }
          }
          req.ctx.repositories = factory
          next()
        }, middleware.validateUser, (req, res) => {
          return res.status(200).json({ message: 'Success! You have reached the target endpoint.' })
        })

      const testHeaders = Object.assign({}, mwFixtures.secretariatHeaders)
      testHeaders[CONSTANTS.AUTH_HEADERS.USER] = 'morgan'

      chai.request(app)
        .post('/validate-user-user-not-found')
        .set(testHeaders)
        .send(cvePass5)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(401)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.unauthorized()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Secret apikey is incorrect', function (done) {
      app.route('/validate-user-key-incorrect')
        .post((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.OrgValidateUserSuccess() },
            getUserRepository: () => { return new repos.UserValidateUserSuccess() }
          }
          req.ctx.repositories = factory
          next()
        }, middleware.validateUser, (req, res) => {
          return res.status(200).json({ message: 'Success! You have reached the target endpoint.' })
        })

      const testHeaders = Object.assign({}, mwFixtures.secretariatHeaders)
      testHeaders[CONSTANTS.AUTH_HEADERS.KEY] = 'wrong secret'

      chai.request(app)
        .post('/validate-user-key-incorrect')
        .set(testHeaders)
        .send(cvePass5)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(401)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.unauthorized()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('User is deactivated', function (done) {
      app.route('/validate-user-deactivated')
        .post((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.OrgValidateUserSuccess() },
            getUserRepository: () => { return new repos.UserValidateUserDeactivated() }
          }
          req.ctx.repositories = factory
          next()
        }, middleware.validateUser, (req, res) => {
          return res.status(200).json({ message: 'Success! You have reached the target endpoint.' })
        })

      const deactivatedHeaders = {}
      deactivatedHeaders[CONSTANTS.AUTH_HEADERS.ORG] = 'mitre'
      deactivatedHeaders[CONSTANTS.AUTH_HEADERS.KEY] = 'S96E4QT-SMT4YE3-KX03X6K-4615CED'
      deactivatedHeaders[CONSTANTS.AUTH_HEADERS.USER] = 'flast'
      deactivatedHeaders['content-type'] = 'application/json'

      chai.request(app)
        .post('/validate-user-deactivated')
        .set(deactivatedHeaders)
        .send()
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(401)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.unauthorized()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Org is undefined', function (done) {
      app.route('/validate-user-org-undefined')
        .post((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.NullOrgRepo() },
            getUserRepository: () => { return new repos.NullUserRepo() }
          }
          req.ctx.repositories = factory
          next()
        }, middleware.validateUser, (req, res) => {
          return res.status(200).json({ message: 'Success! You have reached the target endpoint.' })
        })

      const testHeaders = Object.assign({}, mwFixtures.secretariatHeaders)
      delete testHeaders[CONSTANTS.AUTH_HEADERS.ORG]

      chai.request(app)
        .post('/validate-user-org-undefined')
        .set(testHeaders)
        .send(cvePass5)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.badRequest(CONSTANTS.AUTH_HEADERS.ORG)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Requester is undefined', function (done) {
      app.route('/validate-user-submitter-undefined')
        .post((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.NullOrgRepo() },
            getUserRepository: () => { return new repos.NullUserRepo() }
          }
          req.ctx.repositories = factory
          next()
        }, middleware.validateUser, (req, res) => {
          return res.status(200).json({ message: 'Success! You have reached the target endpoint.' })
        })

      const testHeaders = Object.assign({}, mwFixtures.secretariatHeaders)
      delete testHeaders[CONSTANTS.AUTH_HEADERS.USER]

      chai.request(app)
        .post('/validate-user-submitter-undefined')
        .set(testHeaders)
        .send(cvePass5)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.badRequest(CONSTANTS.AUTH_HEADERS.USER)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Secret apikey is undefined', function (done) {
      app.route('/validate-user-secret-undefined')
        .post((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.NullOrgRepo() },
            getUserRepository: () => { return new repos.NullUserRepo() }
          }
          req.ctx.repositories = factory
          next()
        }, middleware.validateUser, (req, res) => {
          return res.status(200).json({ message: 'Success! You have reached the target endpoint.' })
        })

      const testHeaders = Object.assign({}, mwFixtures.secretariatHeaders)
      delete testHeaders[CONSTANTS.AUTH_HEADERS.KEY]

      chai.request(app)
        .post('/validate-user-secret-undefined')
        .set(testHeaders)
        .send(cvePass5)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.badRequest(CONSTANTS.AUTH_HEADERS.KEY)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })
  })
})
