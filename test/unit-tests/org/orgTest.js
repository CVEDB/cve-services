const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const secretariatHeader = require('./mockObjects.org').secretariatHeader
const owningOrgHeader = require('./mockObjects.org').owningOrgHeader
const orgHeader = require('./mockObjects.org').orgHeader
const owningOrg = require('./mockObjects.org').owningOrg
const existentOrg = require('./mockObjects.org').existentOrg
const nonExistentOrg = require('./mockObjects.org').nonExistentOrg
const orgWithNegativeIdQuota = require('./mockObjects.org').orgWithNegativeIdQuota
const orgExceedingMaxIdQuota = require('./mockObjects.org').orgExceedingMaxIdQuota
const Org = require('../../../src/model/org')
const CONSTANTS = require('../../../src/constants')
const errors = require('../../../src/controller/org.controller/error')
const error = new errors.OrgControllerError()

describe('Test Org Controller', () => {
  context('Creating an org', () => {
    it('Org is created when UUID is undefined', (done) => {
      const testOrg = Object.assign({}, existentOrg)
      delete testOrg.UUID

      chai.request(server)
        .post('/org-created-when-uuid-undefined')
        .set(secretariatHeader)
        .send(testOrg)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(testOrg.short_name + ' organization was successfully created.')
          expect(res.body).to.have.property('created').and.to.be.a('object')
          expect(res.body.created).to.have.property('short_name').to.equal(testOrg.short_name)
          expect(res.body.created).to.have.property('UUID').and.to.be.a('string')
          done()
        })
    })

    it('Org is created when UUID is null', async () => {
      const testOrg = Object.assign({}, existentOrg)
      testOrg.UUID = null

      const res = await chai.request(server)
        .post('/org-created-when-uuid-null')
        .set(secretariatHeader)
        .send(testOrg)

      expect(res).to.have.status(200)
      expect(res).to.have.property('body').and.to.be.a('object')
      expect(res.body).to.have.property('message').and.to.be.a('string')
      expect(res.body.message).to.equal(existentOrg.short_name + ' organization was successfully created.')
      expect(res.body).to.have.property('created').and.to.be.a('object')
      expect(res.body.created).to.have.property('short_name').to.equal(existentOrg.short_name)
      expect(res.body.created).to.have.property('UUID').and.to.be.a('string')
    })

    it('Org is created when UUID is defined', async () => {
      const res = await chai.request(server)
        .post('/org-created-when-uuid-defined')
        .set(secretariatHeader)
        .send(existentOrg)

      expect(res).to.have.status(200)
      expect(res).to.have.property('body').and.to.be.a('object')
      expect(res.body).to.have.property('message').and.to.be.a('string')
      expect(res.body.message).to.equal(existentOrg.short_name + ' organization was successfully created.')
      expect(res.body).to.have.property('created').and.to.be.a('object')
      expect(res.body.created).to.have.property('short_name').to.equal(existentOrg.short_name)
      expect(res.body.created).to.have.property('UUID').to.equal(existentOrg.UUID)
    })

    it('Org is Secretariat and is created when roles are defined', async () => {
      const res = await chai.request(server)
        .post('/org-created-when-roles-defined')
        .set(secretariatHeader)
        .send(existentOrg)

      expect(res).to.have.status(200)
      expect(res).to.have.property('body').and.to.be.a('object')
      expect(res.body).to.have.property('message').and.to.be.a('string')
      expect(res.body.message).to.equal(existentOrg.short_name + ' organization was successfully created.')
      expect(res.body).to.have.property('created').and.to.be.a('object')
      expect(res.body.created).to.have.property('short_name').to.equal(existentOrg.short_name)
      expect(res.body.created).to.have.nested.property('policies.id_quota').to.equal(existentOrg.policies.id_quota)
      expect(res.body.created).to.have.nested.property('authority.active_roles').to.include(CONSTANTS.AUTH_ROLE_ENUM.CNA).and.to.include(CONSTANTS.AUTH_ROLE_ENUM.SECRETARIAT)
      expect(res.body.created).to.have.nested.property('authority.active_roles').to.have.lengthOf(2)
    })

    it('Org is not secretariat and is created when roles are undefined and id_quota is defined', (done) => {
      const testOrg = Object.assign({}, nonExistentOrg)
      delete testOrg.authority.active_roles

      chai.request(server)
        .post('/org-created-when-roles-undefined-id_quota-defined')
        .set(secretariatHeader)
        .send(testOrg)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(testOrg.short_name + ' organization was successfully created.')
          expect(res.body).to.have.property('created').and.to.be.a('object')
          expect(res.body.created).to.have.property('short_name').to.equal(testOrg.short_name)
          expect(res.body.created).to.have.nested.property('policies.id_quota').to.equal(testOrg.policies.id_quota)
          expect(res.body.created).to.have.nested.property('authority.active_roles').to.include(CONSTANTS.AUTH_ROLE_ENUM.CNA)
          expect(res.body.created).to.have.nested.property('authority.active_roles').to.have.lengthOf(1)
          done()
        })
    })

    it('Org is created when id_quota is undefined', async () => {
      const testOrg = Object.assign({}, nonExistentOrg)
      delete testOrg.policies.id_quota

      const res = await chai.request(server)
        .post('/org-created-when-id_quota-undefined')
        .set(secretariatHeader)
        .send(testOrg)

      expect(res).to.have.status(200)
      expect(res).to.have.property('body').and.to.be.a('object')
      expect(res.body).to.have.property('message').and.to.be.a('string')
      expect(res.body.message).to.equal(testOrg.short_name + ' organization was successfully created.')
      expect(res.body).to.have.property('created').and.to.be.a('object')
      expect(res.body.created).to.have.property('short_name').to.equal(testOrg.short_name)
      expect(res.body.created).to.have.nested.property('policies.id_quota').to.equal(CONSTANTS.DEFAULT_ID_QUOTA)
      expect(res.body.created).to.have.nested.property('authority.active_roles').to.include(CONSTANTS.AUTH_ROLE_ENUM.CNA)
      expect(res.body.created).to.have.nested.property('authority.active_roles').to.have.lengthOf(1)
    })

    it('Org is created when id_quota is null', async () => {
      const testOrg = Object.assign({}, nonExistentOrg)
      testOrg.policies.id_quota = null

      const res = await chai.request(server)
        .post('/org-created-when-id_quota-null')
        .set(secretariatHeader)
        .send(testOrg)

      expect(res).to.have.status(200)
      expect(res).to.have.property('body').and.to.be.a('object')
      expect(res.body).to.have.property('message').and.to.be.a('string')
      expect(res.body.message).to.equal(testOrg.short_name + ' organization was successfully created.')
      expect(res.body).to.have.property('created').and.to.be.a('object')
      expect(res.body.created).to.have.property('short_name').to.equal(testOrg.short_name)
      expect(res.body.created).to.have.nested.property('policies.id_quota').to.equal(CONSTANTS.DEFAULT_ID_QUOTA)
      expect(res.body.created).to.have.nested.property('authority.active_roles').to.include(CONSTANTS.AUTH_ROLE_ENUM.CNA)
      expect(res.body.created).to.have.nested.property('authority.active_roles').to.have.lengthOf(1)
    })

    it('Org is not created because it already exists', (done) => {
      chai.request(server)
        .post('/org-not-created-already-exists')
        .set(secretariatHeader)
        .send(existentOrg)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.orgExists(existentOrg.short_name)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })
  })

  context('Updating an org', () => {
    it('Org is not updated because it does not exists', async () => {
      const res = await chai.request(server)
        .put(`/org-not-updated-doesnt-exists/${nonExistentOrg.short_name}`)
        .set(secretariatHeader)
        .send({ shortname: nonExistentOrg.short_name })

      expect(res).to.have.status(404)
      expect(res).to.have.property('body').and.to.be.a('object')
      const errObj = error.orgDneParam(nonExistentOrg.short_name)
      expect(res.body.error).to.equal(errObj.error)
      expect(res.body.message).to.equal(errObj.message)
    })

    it('Org is not updated because the shortname already exists', (done) => {
      chai.request(server)
        .put(`/org-not-updated-shortname-exists/${existentOrg.short_name}?shortname=cisco`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.duplicateShortname('cisco')
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Org id_quota is undefined', (done) => {
      const testOrg = Object.assign({}, existentOrg)
      delete testOrg.policies.id_quota

      chai.request(server)
        .put(`/org-updated-id_quota-undefined/${testOrg.short_name}`)
        .set(secretariatHeader)
        .send(testOrg)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(testOrg.short_name + ' organization was successfully updated.')
          expect(res.body.updated).to.have.nested.property('policies.id_quota').to.equal(1000)
          done()
        })
    })

    // check that the org is unchanged
    it('No query parameters are provided', async () => {
      const result = existentOrg

      const res = await chai.request(server)
        .put(`/org-not-updated-no-query-parameters/${existentOrg.short_name}`)
        .set(secretariatHeader)

      expect(res).to.have.status(200)
      expect(res).to.have.property('body').and.to.be.a('object')
      expect(res.body).to.have.property('updated').and.to.be.a('object')
      expect(res.body.updated.authority.active_roles[0]).to.equal(existentOrg.authority.active_roles[0])
      expect(res.body.updated.authority.active_roles[1]).to.equal(existentOrg.authority.active_roles[1])
      expect(res.body.updated.authority.active_roles).to.have.lengthOf(2)
      expect(res.body.updated.policies.id_quota).to.equal(existentOrg.policies.id_quota)
      expect(res.body.updated.policies.id_quota).to.equal(existentOrg.policies.id_quota)
      expect(result).to.have.property('name').to.equal(existentOrg.name)
      expect(result).to.have.property('short_name').to.equal(existentOrg.short_name)
      expect(result).to.have.property('UUID').to.equal(existentOrg.UUID)
    })
  })

  context('Getting an org', () => {
    it('Org does not exists', async () => {
      const res = await chai.request(server)
        .get(`/org-cant-get-doesnt-exist/${nonExistentOrg.short_name}`)
        .set(secretariatHeader)

      expect(res).to.have.status(404)
      expect(res).to.have.property('body').and.to.be.a('object')
      const errObj = error.orgDneParam(nonExistentOrg.short_name)
      expect(res.body.error).to.equal(errObj.error)
      expect(res.body.message).to.equal(errObj.message)
    })

    it('Org exists and requester is secretariat', (done) => {
      chai.request(server)
        .get(`/org-get-does-exist/${existentOrg.short_name}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('short_name').and.to.equal(existentOrg.short_name)
          done()
        })
    })

    it('Org exists and requester is a user of the same org', (done) => {
      chai.request(server)
        .get(`/org-get-does-exist-user-same-org/${owningOrg.short_name}`)
        .set(owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('short_name').and.to.equal(owningOrg.short_name)
          done()
        })
    })

    it('Org exists and requester is not a user of the same org or is secretariat', (done) => {
      chai.request(server)
        .get(`/org-cant-get-user-not-secretariat-or-same-org/${owningOrg.short_name}`)
        .set(orgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.notSameOrgOrSecretariat()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })
  })

  context('Getting an org\'s ID quota', () => {
    it('Org with a negative id_quota was not saved', (done) => {
      const org = new Org(orgWithNegativeIdQuota)

      org.validate((err) => {
        expect(err.errors['policies.id_quota'].message).to.equal(CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_min_message)
        done()
      })
    })

    it('Org with an id_quota greater than the max was not saved', (done) => {
      const org = new Org(orgExceedingMaxIdQuota)

      org.validate((err) => {
        expect(err.errors['policies.id_quota'].message).to.equal(CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_max_message)
        done()
      })
    })

    it('Requestor is secretariat', (done) => {
      chai.request(server)

        .get(`/org-id_quota-secretariat/${existentOrg.short_name}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body.id_quota).to.equal(1000)
          expect(res.body.total_reserved).to.equal(0)
          expect(res.body.available).to.equal(1000)
          done()
        })
    })

    it('Requestor is a user of the same org', (done) => {
      chai.request(server)

        .get(`/org-id_quota-owning-org/${owningOrg.short_name}`)
        .set(owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body.id_quota).to.equal(5)
          expect(res.body.total_reserved).to.equal(0)
          expect(res.body.available).to.equal(5)
          done()
        })
    })

    it('Requestor is not secretariat or a user of the same org', (done) => {
      chai.request(server)

        .get(`/org-id_quota-not-owning-secretariat-org/${owningOrg.short_name}`)
        .set(orgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.notSameOrgOrSecretariat()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Org does not exist', (done) => {
      chai.request(server)

        .get(`/org-id_quota-org-does-not-exist/${nonExistentOrg.short_name}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.orgDneParam(nonExistentOrg.short_name)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Org id_quota exceeds min quota limit', (done) => {
      chai.request(server)

        .get(`/org-id_quota-exceeds-min-quota-limit/${orgWithNegativeIdQuota.short_name}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('id_quota').to.equal(-1)
          expect(res.body).to.have.property('total_reserved').to.equal(0)
          expect(res.body).to.have.property('available').to.equal(-1)
          done()
        })
    })

    it('Org id_quota exceeds max quota limit', (done) => {
      chai.request(server)

        .get(`/org-id_quota-exceeds-max-quota-limit/${orgExceedingMaxIdQuota.short_name}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('id_quota').to.equal(100500)
          expect(res.body).to.have.property('total_reserved').to.equal(0)
          expect(res.body).to.have.property('available').to.equal(100500)
          done()
        })
    })
  })

  context('Getting all orgs', () => {
    it('Orgs exists and page header is not provided', async () => {
      const testSecretariatHeader = Object.assign({}, secretariatHeader)
      delete testSecretariatHeader['PAGINATOR-PAGE']

      const res = await chai.request(server)
        .get('/org-all-cnas-limit-default')
        .set(testSecretariatHeader)

      expect(res).to.have.status(200)
      expect(res).to.have.property('body').and.to.be.a('object')
      expect(res.body).to.have.property('organizations').and.to.be.a('array').and.to.have.lengthOf(9)
      expect(res.header).to.not.have.property('paginator-itemcount')
      expect(res.header).to.not.have.property('paginator-nextpage')
    })

    it('Orgs exists and page header is provided (page 1/2)', async () => {
      CONSTANTS.PAGINATOR_OPTIONS.limit = 5
      const testSecretariatHeader = Object.assign({}, secretariatHeader)
      testSecretariatHeader['PAGINATOR-PAGE'] = 1

      const res = await chai.request(server)
        .get('/org-all-cnas-limit-5-1')
        .set(testSecretariatHeader)

      expect(res).to.have.status(200)
      expect(res).to.have.property('body').and.to.be.a('object')
      expect(res.body).to.have.property('organizations').and.to.be.a('array').and.to.have.lengthOf(5)
      expect(res.header).to.have.property('paginator-itemcount').and.to.equal('9')
      expect(res.header).to.have.property('paginator-prevpage').and.to.equal('null')
      expect(res.header).to.have.property('paginator-nextpage').and.to.equal('2')
    })

    it('Orgs exists and page header is provided (page 2/2)', async () => {
      const testSecretariatHeader = Object.assign({}, secretariatHeader)
      testSecretariatHeader['PAGINATOR-PAGE'] = 2

      const res = await chai.request(server)
        .get('/org-all-cnas-limit-5-2')
        .set(testSecretariatHeader)

      expect(res).to.have.status(200)
      expect(res).to.have.property('body').and.to.be.a('object')
      expect(res.body).to.have.property('organizations').and.to.be.a('array').and.to.have.lengthOf(4)
      expect(res.header).to.have.property('paginator-itemcount').and.to.equal('9')
      expect(res.header).to.have.property('paginator-prevpage').and.to.equal('1')
      expect(res.header).to.have.property('paginator-nextpage').and.to.equal('null')
      CONSTANTS.PAGINATOR_OPTIONS.limit = 1000
    })

    it('Orgs do not exists', async () => {
      const res = await chai.request(server)
        .get('/org-no-orgs-exist')
        .set(secretariatHeader)

      expect(res).to.have.status(200)
      expect(res).to.have.property('body').and.to.be.a('object')
      expect(res.body).to.have.property('organizations').and.to.be.a('array').and.to.have.lengthOf(0)
      expect(res.header).to.not.have.property('paginator-itemcount')
      expect(res.header).to.not.have.property('paginator-nextpage')
    })
  })
})
