const express = require('express')
const app = express()
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))

// Body Parser Middleware
app.use(express.json()) // Allows us to handle raw JSON data
app.use(express.urlencoded({ extended: false })) // Allows us to handle url encoded data
const middleware = require('../../../src/middleware/middleware')
app.use(middleware.createCtxAndReqUUID)

const Org = require('../../../src/model/org')
const CONSTANTS = require('../../../src/constants')
const errors = require('../../../src/controller/org.controller/error')
const error = new errors.OrgControllerError()

const orgFixtures = require('./mockObjects.org')
const orgController = require('../../../src/controller/org.controller/org.controller')
const orgParams = require('../../../src/controller/org.controller/org.middleware')
const repos = require('../../../test-utils/repositories')

describe('Test Org Controller', () => {
  context('Creating an org', () => {
    it('Org is created when UUID is undefined', (done) => {
      app.route('/org-created-when-uuid-undefined')
        .post((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.OrgCreated() },
            getUserRepository: () => { return new repos.NullUserRepo() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parsePostParams, orgController.ORG_CREATE_SINGLE)

      const testOrg = Object.assign({}, orgFixtures.existentOrg)
      delete testOrg.UUID

      chai.request(app)
        .post('/org-created-when-uuid-undefined')
        .set(orgFixtures.secretariatHeader)
        .send(testOrg)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(testOrg.short_name + ' organization was successfully created.')
          expect(res.body).to.have.property('created').and.to.be.a('object')
          expect(res.body.created).to.have.property('short_name').to.equal(testOrg.short_name)
          expect(res.body.created).to.have.property('UUID').and.to.be.a('string')
          done()
        })
    })

    it('Org is created when UUID is null', async () => {
      app.route('/org-created-when-uuid-null')
        .post((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.OrgCreated() },
            getUserRepository: () => { return new repos.NullUserRepo() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parsePostParams, orgController.ORG_CREATE_SINGLE)

      const testOrg = Object.assign({}, orgFixtures.existentOrg)
      testOrg.UUID = null

      const res = await chai.request(app)
        .post('/org-created-when-uuid-null')
        .set(orgFixtures.secretariatHeader)
        .send(testOrg)

      expect(res).to.have.status(200)
      expect(res).to.have.property('body').and.to.be.a('object')
      expect(res.body).to.have.property('message').and.to.be.a('string')
      expect(res.body.message).to.equal(orgFixtures.existentOrg.short_name + ' organization was successfully created.')
      expect(res.body).to.have.property('created').and.to.be.a('object')
      expect(res.body.created).to.have.property('short_name').to.equal(orgFixtures.existentOrg.short_name)
      expect(res.body.created).to.have.property('UUID').and.to.be.a('string')
    })

    it('Org is created when UUID is defined', async () => {
      app.route('/org-created-when-uuid-defined')
        .post((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.OrgCreated() },
            getUserRepository: () => { return new repos.NullUserRepo() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parsePostParams, orgController.ORG_CREATE_SINGLE)

      const res = await chai.request(app)
        .post('/org-created-when-uuid-defined')
        .set(orgFixtures.secretariatHeader)
        .send(orgFixtures.existentOrg)

      expect(res).to.have.status(200)
      expect(res).to.have.property('body').and.to.be.a('object')
      expect(res.body).to.have.property('message').and.to.be.a('string')
      expect(res.body.message).to.equal(orgFixtures.existentOrg.short_name + ' organization was successfully created.')
      expect(res.body).to.have.property('created').and.to.be.a('object')
      expect(res.body.created).to.have.property('short_name').to.equal(orgFixtures.existentOrg.short_name)
      expect(res.body.created).to.have.property('UUID').to.equal(orgFixtures.existentOrg.UUID)
    })

    it('Org is Secretariat and is created when roles are defined', async () => {
      app.route('/org-created-when-roles-defined')
        .post((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.OrgCreatedWhenRolesDefined() },
            getUserRepository: () => { return new repos.NullUserRepo() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parsePostParams, orgController.ORG_CREATE_SINGLE)

      const res = await chai.request(app)
        .post('/org-created-when-roles-defined')
        .set(orgFixtures.secretariatHeader)
        .send(orgFixtures.existentOrg)

      expect(res).to.have.status(200)
      expect(res).to.have.property('body').and.to.be.a('object')
      expect(res.body).to.have.property('message').and.to.be.a('string')
      expect(res.body.message).to.equal(orgFixtures.existentOrg.short_name + ' organization was successfully created.')
      expect(res.body).to.have.property('created').and.to.be.a('object')
      expect(res.body.created).to.have.property('short_name').to.equal(orgFixtures.existentOrg.short_name)
      expect(res.body.created).to.have.nested.property('policies.id_quota').to.equal(orgFixtures.existentOrg.policies.id_quota)
      expect(res.body.created).to.have.nested.property('authority.active_roles').to.include(CONSTANTS.AUTH_ROLE_ENUM.CNA).and.to.include(CONSTANTS.AUTH_ROLE_ENUM.SECRETARIAT)
      expect(res.body.created).to.have.nested.property('authority.active_roles').to.have.lengthOf(2)
    })

    it('Org is not secretariat and is created when roles are undefined and id_quota is defined', (done) => {
      app.route('/org-created-when-roles-undefined-id_quota-defined')
        .post((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.OrgCreated() },
            getUserRepository: () => { return new repos.NullUserRepo() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parsePostParams, orgController.ORG_CREATE_SINGLE)

      const testOrg = Object.assign({}, orgFixtures.nonExistentOrg)
      delete testOrg.authority.active_roles

      chai.request(app)
        .post('/org-created-when-roles-undefined-id_quota-defined')
        .set(orgFixtures.secretariatHeader)
        .send(testOrg)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(testOrg.short_name + ' organization was successfully created.')
          expect(res.body).to.have.property('created').and.to.be.a('object')
          expect(res.body.created).to.have.property('short_name').to.equal(testOrg.short_name)
          expect(res.body.created).to.have.nested.property('policies.id_quota').to.equal(testOrg.policies.id_quota)
          expect(res.body.created).to.have.nested.property('authority.active_roles').to.include(CONSTANTS.AUTH_ROLE_ENUM.CNA)
          expect(res.body.created).to.have.nested.property('authority.active_roles').to.have.lengthOf(1)
          done()
        })
    })

    it('Org is created when id_quota is undefined', async () => {
      app.route('/org-created-when-id_quota-undefined')
        .post((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.OrgCreated() },
            getUserRepository: () => { return new repos.NullUserRepo() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parsePostParams, orgController.ORG_CREATE_SINGLE)

      const testOrg = Object.assign({}, orgFixtures.nonExistentOrg)
      delete testOrg.policies.id_quota

      const res = await chai.request(app)
        .post('/org-created-when-id_quota-undefined')
        .set(orgFixtures.secretariatHeader)
        .send(testOrg)

      expect(res).to.have.status(200)
      expect(res).to.have.property('body').and.to.be.a('object')
      expect(res.body).to.have.property('message').and.to.be.a('string')
      expect(res.body.message).to.equal(testOrg.short_name + ' organization was successfully created.')
      expect(res.body).to.have.property('created').and.to.be.a('object')
      expect(res.body.created).to.have.property('short_name').to.equal(testOrg.short_name)
      expect(res.body.created).to.have.nested.property('policies.id_quota').to.equal(CONSTANTS.DEFAULT_ID_QUOTA)
      expect(res.body.created).to.have.nested.property('authority.active_roles').to.include(CONSTANTS.AUTH_ROLE_ENUM.CNA)
      expect(res.body.created).to.have.nested.property('authority.active_roles').to.have.lengthOf(1)
    })

    it('Org is created when id_quota is null', async () => {
      app.route('/org-created-when-id_quota-null')
        .post((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.OrgCreated() },
            getUserRepository: () => { return new repos.NullUserRepo() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parsePostParams, orgController.ORG_CREATE_SINGLE)

      const testOrg = Object.assign({}, orgFixtures.nonExistentOrg)
      testOrg.policies.id_quota = null

      const res = await chai.request(app)
        .post('/org-created-when-id_quota-null')
        .set(orgFixtures.secretariatHeader)
        .send(testOrg)

      expect(res).to.have.status(200)
      expect(res).to.have.property('body').and.to.be.a('object')
      expect(res.body).to.have.property('message').and.to.be.a('string')
      expect(res.body.message).to.equal(testOrg.short_name + ' organization was successfully created.')
      expect(res.body).to.have.property('created').and.to.be.a('object')
      expect(res.body.created).to.have.property('short_name').to.equal(testOrg.short_name)
      expect(res.body.created).to.have.nested.property('policies.id_quota').to.equal(CONSTANTS.DEFAULT_ID_QUOTA)
      expect(res.body.created).to.have.nested.property('authority.active_roles').to.include(CONSTANTS.AUTH_ROLE_ENUM.CNA)
      expect(res.body.created).to.have.nested.property('authority.active_roles').to.have.lengthOf(1)
    })

    it('Org is not created because it already exists', (done) => {
      app.route('/org-not-created-already-exists')
        .post((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.OrgNotCreatedAlreadyExists() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parsePostParams, orgController.ORG_CREATE_SINGLE)

      chai.request(app)
        .post('/org-not-created-already-exists')
        .set(orgFixtures.secretariatHeader)
        .send(orgFixtures.existentOrg)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.orgExists(orgFixtures.existentOrg.short_name)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })
  })

  context('Updating an org', () => {
    it('Org is not updated because it does not exists', async () => {
      app.route('/org-not-updated-doesnt-exists/:shortname')
        .put((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.OrgNotUpdatedDoesNotExist() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parsePostParams, orgController.ORG_UPDATE_SINGLE)

      const res = await chai.request(app)
        .put(`/org-not-updated-doesnt-exists/${orgFixtures.nonExistentOrg.short_name}`)
        .set(orgFixtures.secretariatHeader)
        .send({ shortname: orgFixtures.nonExistentOrg.short_name })

      expect(res).to.have.status(404)
      expect(res).to.have.property('body').and.to.be.a('object')
      const errObj = error.orgDneParam(orgFixtures.nonExistentOrg.short_name)
      expect(res.body.error).to.equal(errObj.error)
      expect(res.body.message).to.equal(errObj.message)
    })

    it('Org is not updated because the shortname already exists', (done) => {
      app.route('/org-not-updated-shortname-exists/:shortname')
        .put((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.OrgNotUpdatedShortNameExists() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parsePostParams, orgController.ORG_UPDATE_SINGLE)

      chai.request(app)
        .put(`/org-not-updated-shortname-exists/${orgFixtures.existentOrg.short_name}?shortname=cisco`)
        .set(orgFixtures.secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.duplicateShortname('cisco')
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Org id_quota is undefined', (done) => {
      app.route('/org-updated-id_quota-undefined/:shortname')
        .put((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.OrgNotUpdatedIdQuotaUndefined() },
            getUserRepository: () => { return new repos.NullUserRepo() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parsePostParams, orgController.ORG_UPDATE_SINGLE)

      const testOrg = Object.assign({}, orgFixtures.existentOrg)
      delete testOrg.policies.id_quota

      chai.request(app)
        .put(`/org-updated-id_quota-undefined/${testOrg.short_name}`)
        .set(orgFixtures.secretariatHeader)
        .send(testOrg)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(testOrg.short_name + ' organization was successfully updated.')
          expect(res.body.updated).to.have.nested.property('policies.id_quota').to.equal(1000)
          done()
        })
    })

    // check that the org is unchanged
    it('No query parameters are provided', async () => {
      app.route('/org-not-updated-no-query-parameters/:shortname')
        .put((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.OrgNotUpdatedNoQueryParameters() },
            getUserRepository: () => { return new repos.NullUserRepo() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parsePostParams, orgController.ORG_UPDATE_SINGLE)

      const result = orgFixtures.existentOrg
      const res = await chai.request(app)
        .put(`/org-not-updated-no-query-parameters/${orgFixtures.existentOrg.short_name}`)
        .set(orgFixtures.secretariatHeader)

      expect(res).to.have.status(200)
      expect(res).to.have.property('body').and.to.be.a('object')
      expect(res.body).to.have.property('updated').and.to.be.a('object')
      expect(res.body.updated.authority.active_roles[0]).to.equal(orgFixtures.existentOrg.authority.active_roles[0])
      expect(res.body.updated.authority.active_roles[1]).to.equal(orgFixtures.existentOrg.authority.active_roles[1])
      expect(res.body.updated.authority.active_roles).to.have.lengthOf(2)
      expect(res.body.updated.policies.id_quota).to.equal(orgFixtures.existentOrg.policies.id_quota)
      expect(res.body.updated.policies.id_quota).to.equal(orgFixtures.existentOrg.policies.id_quota)
      expect(result).to.have.property('name').to.equal(orgFixtures.existentOrg.name)
      expect(result).to.have.property('short_name').to.equal(orgFixtures.existentOrg.short_name)
      expect(result).to.have.property('UUID').to.equal(orgFixtures.existentOrg.UUID)
    })
  })

  context('Getting an org', () => {
    it('Org does not exists', async () => {
      app.route('/org-cant-get-doesnt-exist/:shortname')
        .get((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.OrgGet() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parseGetParams, orgController.ORG_SINGLE)

      const res = await chai.request(app)
        .get(`/org-cant-get-doesnt-exist/${orgFixtures.nonExistentOrg.short_name}`)
        .set(orgFixtures.secretariatHeader)

      expect(res).to.have.status(404)
      expect(res).to.have.property('body').and.to.be.a('object')
      const errObj = error.orgDneParam(orgFixtures.nonExistentOrg.short_name)
      expect(res.body.error).to.equal(errObj.error)
      expect(res.body.message).to.equal(errObj.message)
    })

    it('Org exists and requester is secretariat', (done) => {
      app.route('/org-get-does-exist/:shortname')
        .get((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.OrgGet() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parseGetParams, orgController.ORG_SINGLE)

      chai.request(app)
        .get(`/org-get-does-exist/${orgFixtures.existentOrg.short_name}`)
        .set(orgFixtures.secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('short_name').and.to.equal(orgFixtures.existentOrg.short_name)
          done()
        })
    })

    it('Org exists and requester is a user of the same org', (done) => {
      app.route('/org-get-does-exist-user-same-org/:shortname')
        .get((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.OrgGet() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parseGetParams, orgController.ORG_SINGLE)

      chai.request(app)
        .get(`/org-get-does-exist-user-same-org/${orgFixtures.owningOrg.short_name}`)
        .set(orgFixtures.owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('short_name').and.to.equal(orgFixtures.owningOrg.short_name)
          done()
        })
    })

    it('Org exists and requester is not a user of the same org or is secretariat', (done) => {
      app.route('/org-cant-get-user-not-secretariat-or-same-org/:shortname')
        .get((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.OrgGet() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parseGetParams, orgController.ORG_SINGLE)

      chai.request(app)
        .get(`/org-cant-get-user-not-secretariat-or-same-org/${orgFixtures.owningOrg.short_name}`)
        .set(orgFixtures.orgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.notSameOrgOrSecretariat()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })
  })

  context('Getting an org\'s ID quota', () => {
    it('Org with a negative id_quota was not saved', (done) => {
      const org = new Org(orgFixtures.orgWithNegativeIdQuota)

      org.validate((err) => {
        expect(err.errors['policies.id_quota'].message).to.equal(CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_min_message)
        done()
      })
    })

    it('Org with an id_quota greater than the max was not saved', (done) => {
      const org = new Org(orgFixtures.orgExceedingMaxIdQuota)

      org.validate((err) => {
        expect(err.errors['policies.id_quota'].message).to.equal(CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_max_message)
        done()
      })
    })

    it('Requestor is secretariat', (done) => {
      app.route('/org-id_quota-secretariat/:shortname')
        .get((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.OrgSecretariatIdQuota() },
            getCveIdRepository: () => { return new repos.CveIdSecretariatIdQuota() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parseGetParams, orgController.ORG_ID_QUOTA)

      chai.request(app)
        .get(`/org-id_quota-secretariat/${orgFixtures.existentOrg.short_name}`)
        .set(orgFixtures.secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body.id_quota).to.equal(1000)
          expect(res.body.total_reserved).to.equal(0)
          expect(res.body.available).to.equal(1000)
          done()
        })
    })

    it('Requestor is a user of the same org', (done) => {
      app.route('/org-id_quota-owning-org/:shortname')
        .get((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.OrgOwnerIdQuota() },
            getCveIdRepository: () => { return new repos.CveIdOwnerIdQuota() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parseGetParams, orgController.ORG_ID_QUOTA)

      chai.request(app)
        .get(`/org-id_quota-owning-org/${orgFixtures.owningOrg.short_name}`)
        .set(orgFixtures.owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body.id_quota).to.equal(5)
          expect(res.body.total_reserved).to.equal(0)
          expect(res.body.available).to.equal(5)
          done()
        })
    })

    it('Requestor is not secretariat or a user of the same org', (done) => {
      app.route('/org-id_quota-not-owning-secretariat-org/:shortname')
        .get((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.OrgNotOwnerOrSecretariatIdQuota() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parseGetParams, orgController.ORG_ID_QUOTA)

      chai.request(app)
        .get(`/org-id_quota-not-owning-secretariat-org/${orgFixtures.owningOrg.short_name}`)
        .set(orgFixtures.orgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.notSameOrgOrSecretariat()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Org does not exist', (done) => {
      app.route('/org-id_quota-org-does-not-exist/:shortname')
        .get((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.OrgDoesNotExistIdQuota() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parseGetParams, orgController.ORG_ID_QUOTA)

      chai.request(app)
        .get(`/org-id_quota-org-does-not-exist/${orgFixtures.nonExistentOrg.short_name}`)
        .set(orgFixtures.secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.orgDneParam(orgFixtures.nonExistentOrg.short_name)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Org id_quota exceeds min quota limit', (done) => {
      app.route('/org-id_quota-exceeds-min-quota-limit/:shortname')
        .get((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.OrgExceedsMinIdQuota() },
            getCveIdRepository: () => { return new repos.CveIdExceedsMinQuota() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parseGetParams, orgController.ORG_ID_QUOTA)

      chai.request(app)
        .get(`/org-id_quota-exceeds-min-quota-limit/${orgFixtures.orgWithNegativeIdQuota.short_name}`)
        .set(orgFixtures.secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('id_quota').to.equal(-1)
          expect(res.body).to.have.property('total_reserved').to.equal(0)
          expect(res.body).to.have.property('available').to.equal(-1)
          done()
        })
    })

    it('Org id_quota exceeds max quota limit', (done) => {
      app.route('/org-id_quota-exceeds-max-quota-limit/:shortname')
        .get((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new repos.OrgExceedsMaxIdQuota() },
            getCveIdRepository: () => { return new repos.CveIdExceedsMaxQuota() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parseGetParams, orgController.ORG_ID_QUOTA)

      chai.request(app)
        .get(`/org-id_quota-exceeds-max-quota-limit/${orgFixtures.orgExceedingMaxIdQuota.short_name}`)
        .set(orgFixtures.secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('id_quota').to.equal(100500)
          expect(res.body).to.have.property('total_reserved').to.equal(0)
          expect(res.body).to.have.property('available').to.equal(100500)
          done()
        })
    })
  })

  context('Getting all orgs', () => {
    it('Page query param not provided: should list non-paginated orgs because orgs fit in one page', async () => {
      CONSTANTS.PAGINATOR_OPTIONS.limit = 500
      class GetAllOrgs {
        async aggregatePaginate () {
          const res = {
            itemsList: orgFixtures.allOrgs,
            itemCount: orgFixtures.allOrgs.length,
            itemsPerPage: CONSTANTS.PAGINATOR_OPTIONS.limit,
            currentPage: 1,
            pageCount: 1,
            pagingCounter: 1,
            hasPrevPage: false,
            hasNextPage: false,
            prevPage: null,
            nextPage: null
          }
          return res
        }
      }

      app.route('/org-all-cnas-non-paginated')
        .get((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new GetAllOrgs() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parseGetParams, orgController.ORG_ALL)

      const testSecretariatHeader = Object.assign({}, orgFixtures.secretariatHeader)
      const res = await chai.request(app)
        .get('/org-all-cnas-non-paginated')
        .set(testSecretariatHeader)

      expect(res).to.have.status(200)
      expect(res).to.have.property('body').and.to.be.a('object')
      expect(res.body).to.have.property('organizations').and.to.be.a('array').and.to.have.lengthOf(orgFixtures.allOrgs.length)
      expect(res.body).to.not.have.property('totalCount')
      expect(res.body).to.not.have.property('itemsPerPage')
      expect(res.body).to.not.have.property('pageCount')
      expect(res.body).to.not.have.property('currentPage')
      expect(res.body).to.not.have.property('prevPage')
      expect(res.body).to.not.have.property('nextPage')
    })

    it('Page query param not provided: should list the users in two pages (page 1/2)', async () => {
      CONSTANTS.PAGINATOR_OPTIONS.limit = 5
      class GetAllOrgs {
        async aggregatePaginate () {
          const res = {
            itemsList: [orgFixtures.allOrgs[0], orgFixtures.allOrgs[1], orgFixtures.allOrgs[3], orgFixtures.allOrgs[3], orgFixtures.allOrgs[4]],
            itemCount: orgFixtures.allOrgs.length,
            itemsPerPage: CONSTANTS.PAGINATOR_OPTIONS.limit,
            currentPage: 1,
            pageCount: 2,
            pagingCounter: 1,
            hasPrevPage: false,
            hasNextPage: true,
            prevPage: null,
            nextPage: 2
          }
          return res
        }
      }

      app.route('/org-all-cnas-paginated')
        .get((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new GetAllOrgs() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parseGetParams, orgController.ORG_ALL)

      const testSecretariatHeader = Object.assign({}, orgFixtures.secretariatHeader)
      const res = await chai.request(app)
        .get('/org-all-cnas-paginated')
        .set(testSecretariatHeader)

      expect(res).to.have.status(200)
      expect(res).to.have.property('body').and.to.be.a('object')
      expect(res.body).to.have.property('organizations').and.to.be.a('array').and.to.have.lengthOf(5)
      expect(res.body).to.have.property('totalCount').and.to.equal(orgFixtures.allOrgs.length)
      expect(res.body).to.have.property('itemsPerPage').and.to.equal(CONSTANTS.PAGINATOR_OPTIONS.limit)
      expect(res.body).to.have.property('pageCount').and.to.equal(2)
      expect(res.body).to.have.property('currentPage').and.to.equal(1)
      expect(res.body).to.have.property('prevPage').and.to.equal(null)
      expect(res.body).to.have.property('nextPage').and.to.equal(2)
    })

    it('Page query param provided: should list the users in two pages (page 2/2)', async () => {
      CONSTANTS.PAGINATOR_OPTIONS.limit = 5
      class GetAllOrgs {
        async aggregatePaginate () {
          const res = {
            itemsList: [orgFixtures.allOrgs[5], orgFixtures.allOrgs[6], orgFixtures.allOrgs[7], orgFixtures.allOrgs[8]],
            itemCount: orgFixtures.allOrgs.length,
            itemsPerPage: CONSTANTS.PAGINATOR_OPTIONS.limit,
            currentPage: 2,
            pageCount: 2,
            pagingCounter: 1,
            hasPrevPage: true,
            hasNextPage: false,
            prevPage: 1,
            nextPage: null
          }
          return res
        }
      }

      app.route('/org-all-cnas-paginated-2')
        .get((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new GetAllOrgs() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parseGetParams, orgController.ORG_ALL)

      const testSecretariatHeader = Object.assign({}, orgFixtures.secretariatHeader)
      const res = await chai.request(app)
        .get('/org-all-cnas-paginated-2?page=2')
        .set(testSecretariatHeader)

      expect(res).to.have.status(200)
      expect(res).to.have.property('body').and.to.be.a('object')
      expect(res.body).to.have.property('organizations').and.to.be.a('array').and.to.have.lengthOf(4)
      expect(res.body).to.have.property('totalCount').and.to.equal(orgFixtures.allOrgs.length)
      expect(res.body).to.have.property('itemsPerPage').and.to.equal(CONSTANTS.PAGINATOR_OPTIONS.limit)
      expect(res.body).to.have.property('pageCount').and.to.equal(2)
      expect(res.body).to.have.property('currentPage').and.to.equal(2)
      expect(res.body).to.have.property('prevPage').and.to.equal(1)
      expect(res.body).to.have.property('nextPage').and.to.equal(null)
    })

    it('Page query param provided: should return an empty list because no org exists', async () => {
      CONSTANTS.PAGINATOR_OPTIONS.limit = 500
      class GetAllOrgs {
        async aggregatePaginate () {
          const res = {
            itemsList: [],
            itemCount: 0,
            itemsPerPage: CONSTANTS.PAGINATOR_OPTIONS.limit,
            currentPage: 1,
            pageCount: 1,
            pagingCounter: 1,
            hasPrevPage: false,
            hasNextPage: false,
            prevPage: null,
            nextPage: null
          }
          return res
        }
      }

      app.route('/org-all-cnas-empty')
        .get((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new GetAllOrgs() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parseGetParams, orgController.ORG_ALL)

      const res = await chai.request(app)
        .get('/org-all-cnas-empty?page=1')
        .set(orgFixtures.secretariatHeader)

      expect(res).to.have.status(200)
      expect(res).to.have.property('body').and.to.be.a('object')
      expect(res.body).to.have.property('organizations').and.to.be.a('array').and.to.have.lengthOf(0)
      expect(res.body).to.not.have.property('totalCount')
      expect(res.body).to.not.have.property('itemsPerPage')
      expect(res.body).to.not.have.property('pageCount')
      expect(res.body).to.not.have.property('currentPage')
      expect(res.body).to.not.have.property('prevPage')
      expect(res.body).to.not.have.property('nextPage')
    })
  })
})
