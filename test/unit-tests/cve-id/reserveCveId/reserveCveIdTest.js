const express = require('express')
const app = express()
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))

// Body Parser Middleware
app.use(express.json()) // Allows us to handle raw JSON data
app.use(express.urlencoded({ extended: false })) // Allows us to handle url encoded data
const middleware = require('../../../../src/middleware/middleware')
app.use(middleware.createCtxAndReqUUID)

const year20 = 2020
const year21 = 2021
const year22 = 2022
const CONSTANTS = require('../../../../src/constants')
const errors = require('../../../../src/controller/cve-id.controller/error')
const error = new errors.CveIdControllerError()

const cveIdFixtures = require('../mockObjects.cve-id')
const cveIdController = require('../../../../src/controller/cve-id.controller/cve-id.controller')
const cveIdParams = require('../../../../src/controller/cve-id.controller/cve-id.middleware')
const repos = require('../../../../test-utils/repositories')

describe('Test ID Reservator', () => {
  context('General Logic', () => {
    it('Requester is not a user of the same org or the secretariat', (done) => {
      app.route('/cve-id-reserve-not-owning-org')
        .post((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new repos.NullCveIdRepo() },
            getUserRepository: () => { return new repos.NullUserRepo() },
            getOrgRepository: () => { return new repos.OrgReserveNotOwningOrg() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

      chai.request(app)
        .post(`/cve-id-reserve-not-owning-org?cve_year=${year20}&amount=1`)
        .set(cveIdFixtures.orgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.orgCannotReserveForOther()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Shortname query parameter is undefined', (done) => {
      app.route('/cve-id-reserve-shortname-undefined')
        .post((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new repos.NullCveIdRepo() },
            getUserRepository: () => { return new repos.NullUserRepo() },
            getOrgRepository: () => { return new repos.OrgReserveShortNameUndefined() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

      chai.request(app)
        .post(`/cve-id-reserve-shortname-undefined?cve_year=${year20}&amount=1`)
        .set(cveIdFixtures.secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.noOrgShortName()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Year query parameter is undefined', (done) => {
      app.route('/cve-id-reserve-year-undefined')
        .post((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new repos.NullCveIdRepo() },
            getUserRepository: () => { return new repos.NullUserRepo() },
            getOrgRepository: () => { return new repos.OrgReserveShortNameUndefined() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

      chai.request(app)
        .post(`/cve-id-reserve-year-undefined?short_name=${cveIdFixtures.owningOrg.short_name}&amount=1`)
        .set(cveIdFixtures.secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.noYear()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Amount query parameter is undefined', (done) => {
      app.route('/cve-id-reserve-amount-undefined')
        .post((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new repos.NullCveIdRepo() },
            getUserRepository: () => { return new repos.NullUserRepo() },
            getOrgRepository: () => { return new repos.OrgReserveShortNameUndefined() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

      chai.request(app)
        .post(`/cve-id-reserve-amount-undefined?short_name=${cveIdFixtures.owningOrg.short_name}&cve_year=${year20}`)
        .set(cveIdFixtures.secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.noAmount()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Amount query parameter is <= 0', (done) => {
      app.route('/cve-id-reserve-amount-0')
        .post((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new repos.NullCveIdRepo() },
            getUserRepository: () => { return new repos.NullUserRepo() },
            getOrgRepository: () => { return new repos.OrgReserveShortNameUndefined() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

      chai.request(app)
        .post(`/cve-id-reserve-amount-0?short_name=${cveIdFixtures.owningOrg.short_name}&cve_year=${year20}&amount=0`)
        .set(cveIdFixtures.secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.invalidAmount()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Amount query parameter is > 1 and batchType is undefined', (done) => {
      app.route('/cve-id-reserve-batchtype-undefined')
        .post((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new repos.NullCveIdRepo() },
            getUserRepository: () => { return new repos.NullUserRepo() },
            getOrgRepository: () => { return new repos.OrgReserveShortNameUndefined() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

      chai.request(app)
        .post(`/cve-id-reserve-batchtype-undefined?short_name=${cveIdFixtures.owningOrg.short_name}&cve_year=${year20}&amount=5`)
        .set(cveIdFixtures.secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.noBatchType()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Org does not exist', (done) => {
      app.route('/cve-id-reserve-org-doesnt-exist')
        .post((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new repos.NullCveIdRepo() },
            getUserRepository: () => { return new repos.NullUserRepo() },
            getOrgRepository: () => { return new repos.OrgReserveOrgDoesntExist() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

      chai.request(app)
        .post(`/cve-id-reserve-org-doesnt-exist?short_name=${cveIdFixtures.nonExistentOrg.short_name}&cve_year=${year20}&amount=1`)
        .set(cveIdFixtures.secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.orgDne(cveIdFixtures.nonExistentOrg.short_name)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Amount query parameter is greater than max nonsequential amount allowed', (done) => {
      app.route('/cve-id-reserve-amount-greater-nonsequential')
        .post((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new repos.NullCveIdRepo() },
            getUserRepository: () => { return new repos.NullUserRepo() },
            getOrgRepository: () => { return new repos.OrgReserveAmountLargerThanNonSequential() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

      chai.request(app)
        .post(`/cve-id-reserve-amount-greater-nonsequential?short_name=${cveIdFixtures.org.short_name}&cve_year=${year20}&amount=${(CONSTANTS.NONSEQUENTIAL_MAX_AMOUNT + 1)}&batch_type=nonsequential`)
        .set(cveIdFixtures.secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.overNonSequentialMaxAmount()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Amount query parameter is > than id_quota', (done) => {
      app.route('/cve-id-reserve-amount-greater-id-quota')
        .post((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new repos.NullCveIdRepo() },
            getUserRepository: () => { return new repos.NullUserRepo() },
            getOrgRepository: () => { return new repos.OrgReserveAmountGreaterIdQuota() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

      chai.request(app)
        .post(`/cve-id-reserve-amount-greater-id-quota?short_name=${cveIdFixtures.org.short_name}&cve_year=${year20}&amount=700&batch_type=sequential`)
        .set(cveIdFixtures.secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.overIdQuota(res.body.details)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          expect(res.body.details).to.equal(errObj.details)
          done()
        })
    })

    it('Invalid batchType', (done) => {
      app.route('/cve-id-reserve-invalid-batchtype')
        .post((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new repos.NullCveIdRepo() },
            getUserRepository: () => { return new repos.NullUserRepo() },
            getOrgRepository: () => { return new repos.OrgReserveAmountLargerThanNonSequential() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

      chai.request(app)
        .post(`/cve-id-reserve-invalid-batchtype?short_name=${cveIdFixtures.org.short_name}&cve_year=${year20}&amount=1&batch_type=pair`)
        .set(cveIdFixtures.secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.invalidBatchType()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })
  })

  context('Priority Reservation', () => {
    it('CveId Range document for year 2025 does not exist', (done) => {
      app.route('/cve-id-reserve-year-2025-doesnt-exist')
        .post((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new repos.NullCveIdRepo() },
            getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveYearDoesntExist() },
            getUserRepository: () => { return new repos.NullUserRepo() },
            getOrgRepository: () => { return new repos.OrgReserveYear2025RangeDoesntExist() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

      chai.request(app)
        .post(`/cve-id-reserve-year-2025-doesnt-exist?short_name=${cveIdFixtures.owningOrg.short_name}&cve_year=2025&amount=1`)
        .set(cveIdFixtures.secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          const quotaHeader = cveIdFixtures.owningOrg.policies.id_quota.toString()
          expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.cannotReserveForYear('2025')
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Cve ID is reserved in the sequential block because the priority block for year 2021 is full', (done) => {
      app.route('/cve-id-reserve-sequential-block-priority-full')
        .post((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new repos.CveIdReserveSequentialPriorityIsFull() },
            getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveSequentialPriorityIsFull() },
            getUserRepository: () => { return new repos.UserReserveSequentialPriorityIsFull() },
            getOrgRepository: () => { return new repos.OrgReserveSequentialPriorityIsFull() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

      const top = CONSTANTS.DEFAULT_CVE_ID_RANGE.ranges.general.end - 1
      const count = String(top + 1).padStart(4, '0')

      chai.request(app)
        .post(`/cve-id-reserve-sequential-block-priority-full?short_name=${cveIdFixtures.owningOrg.short_name}&cve_year=${year21}&amount=1`)
        .set(cveIdFixtures.owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          const quotaHeader = (cveIdFixtures.owningOrg.policies.id_quota - 1).toString()
          expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array')
          res.body.cve_ids.forEach(obj => {
            expect(obj).to.have.property('cve_id').and.to.equal(`CVE-${year21}-${count}`)
            expect(obj).to.have.property('state').and.to.equal('RESERVED')
            expect(obj).to.have.property('owning_cna').and.to.equal(cveIdFixtures.owningOrg.short_name)
            expect(obj).to.have.nested.property('requested_by.cna').and.to.equal(cveIdFixtures.owningOrg.short_name)
            expect(obj).to.have.nested.property('requested_by.user').and.to.equal(cveIdFixtures.owningOrgUser.username)
          })
          done()
        })
    })

    it('CveId Range document for year 2021 is full', (done) => {
      app.route('/cve-id-reserve-range-2021-full')
        .post((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new repos.CveIdReserveSequentialPriorityIsFull() },
            getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveSequentialIsFull() },
            getUserRepository: () => { return new repos.NullUserRepo() },
            getOrgRepository: () => { return new repos.OrgReserveSequentialIsFull() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

      chai.request(app)
        .post(`/cve-id-reserve-range-2021-full?short_name=${cveIdFixtures.owningOrg.short_name}&cve_year=${year21}&amount=1`)
        .set(cveIdFixtures.owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          const quotaHeader = (cveIdFixtures.owningOrg.policies.id_quota).toString()
          expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.yearRangeFull(year21)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Cve ID is reserved in the priority block', (done) => {
      app.route('/cve-id-reserve-complete')
        .post((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new repos.CveIdReserveSequentialPriorityIsFull() },
            getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveSequentialPriority() },
            getUserRepository: () => { return new repos.UserReserveSequentialPriorityIsFull() },
            getOrgRepository: () => { return new repos.OrgReserveSequentialPriorityIsFull() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

      const top = 0
      const count = String(top + 1).padStart(4, '0')

      chai.request(app)
        .post(`/cve-id-reserve-complete?short_name=${cveIdFixtures.owningOrg.short_name}&cve_year=${year20}&amount=1`)
        .set(cveIdFixtures.owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          const quotaHeader = (cveIdFixtures.owningOrg.policies.id_quota - 1).toString()
          expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array')
          res.body.cve_ids.forEach(obj => {
            expect(obj).to.have.property('cve_id').and.to.equal(`CVE-${year20}-${count}`)
            expect(obj).to.have.property('state').and.to.equal('RESERVED')
            expect(obj).to.have.property('owning_cna').and.to.equal(cveIdFixtures.owningOrg.short_name)
            expect(obj).to.have.nested.property('requested_by.cna').and.to.equal(cveIdFixtures.owningOrg.short_name)
            expect(obj).to.have.nested.property('requested_by.user').and.to.equal(cveIdFixtures.owningOrgUser.username)
          })
          done()
        })
    })
  })

  context('Sequential Reservation', () => {
    it('CveId Range document for year 2025 does not exist', (done) => {
      app.route('/cve-id-reserve-2025-doesnt-exist-sequential')
        .post((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new repos.CveIdReserveSequentialYearDoesntExist() },
            getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveYearDoesntExist() },
            getUserRepository: () => { return new repos.NullUserRepo() },
            getOrgRepository: () => { return new repos.OrgReserveYear2025RangeDoesntExistSequential() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

      chai.request(app)
        .post(`/cve-id-reserve-2025-doesnt-exist-sequential?short_name=${cveIdFixtures.owningOrg.short_name}&cve_year=2025&amount=5&batch_type=sequential`)
        .set(cveIdFixtures.secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          const quotaHeader = (cveIdFixtures.owningOrg.policies.id_quota - 2).toString()
          expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.cannotReserveForYear('2025')
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('CveId Range document for year 2021 is full', (done) => {
      app.route('/cve-id-reserve-2021-full-sequential')
        .post((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new repos.CveIdReserveSequentialIsFull() },
            getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveSequentialIsFull() },
            getUserRepository: () => { return new repos.NullUserRepo() },
            getOrgRepository: () => { return new repos.OrgReserveYear2025RangeDoesntExistSequential() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

      chai.request(app)
        .post(`/cve-id-reserve-2021-full-sequential?short_name=${cveIdFixtures.owningOrg.short_name}&cve_year=${year21}&amount=10&batch_type=sequential`)
        .set(cveIdFixtures.secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          const quotaHeader = (cveIdFixtures.owningOrg.policies.id_quota - 2).toString()
          expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.yearRangeFull(year21)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Cve IDs are reserved for year 2020', (done) => {
      app.route('/cve-id-reserve-2020-sequential')
        .post((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new repos.CveIdReserveSequential() },
            getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveSequential() },
            getUserRepository: () => { return new repos.UserReserveSequentialPriorityIsFull() },
            getOrgRepository: () => { return new repos.OrgReserveSequentialPriorityIsFull() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

      const top = 10
      let counter = 1

      chai.request(app)
        .post(`/cve-id-reserve-2020-sequential?short_name=${cveIdFixtures.owningOrg.short_name}&cve_year=${year20}&amount=5&batch_type=sequential`)
        .set(cveIdFixtures.owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          const quotaHeader = (cveIdFixtures.owningOrg.policies.id_quota - 7).toString() // already has two reserved cve ids
          expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(5)
          res.body.cve_ids.forEach(obj => {
            const count = String(top + counter).padStart(4, '0')
            expect(obj).to.have.property('cve_id').and.to.equal(`CVE-${year20}-${count}`) // check that cve ids are sequential
            expect(obj).to.have.property('state').and.to.equal('RESERVED')
            expect(obj).to.have.property('owning_cna').and.to.equal(cveIdFixtures.owningOrg.short_name)
            expect(obj).to.have.nested.property('requested_by.cna').and.to.equal(cveIdFixtures.owningOrg.short_name)
            expect(obj).to.have.nested.property('requested_by.user').and.to.equal(cveIdFixtures.owningOrgUser.username)
            counter++
          })
          done()
        })
    })
  })

  // context(`Create CveId Range for year ${year22}`, () => {
  //   it(`CveId Range is created for year ${year22}`, (done) => {
  //     app.route('/cve-id-range-2022/:year')
  //       .post((req, res, next) => {
  //         const factory = {
  //           getCveIdRangeRepository: () => { return new repos.CveIdRange2022NotExists() },
  //           getUserRepository: () => { return new repos.NullUserRepo() },
  //           getOrgRepository: () => { return new repos.NullOrgRepo() }
  //         }
  //         req.ctx.repositories = factory
  //         next()
  //       }, cveIdParams.parsePostParams, cveIdController.CVEID_RANGE_CREATE)

  //     chai.request(app)
  //       .post(`/cve-id-range-2022/${year22}`)
  //       .set(cveIdFixtures.secretariatHeader)
  //       .end((err, res) => {
  //         if (err) {
  //           done(err)
  //         }

  //         expect(res).to.have.status(200)
  //         done()
  //       })
  //   })

  //   it(`CveId Range already exists for year ${year22}`, (done) => {
  //     app.route('/cve-id-range-2022-already-exists/:year')
  //       .post((req, res, next) => {
  //         const factory = {
  //           getCveIdRangeRepository: () => { return new repos.CveIdRange2022Exists() },
  //           getUserRepository: () => { return new repos.NullUserRepo() },
  //           getOrgRepository: () => { return new repos.NullOrgRepo() }
  //         }
  //         req.ctx.repositories = factory
  //         next()
  //       }, cveIdParams.parsePostParams, cveIdController.CVEID_RANGE_CREATE)

  //     chai.request(app)
  //       .post(`/cve-id-range-2022-already-exists/${year22}`)
  //       .set(cveIdFixtures.secretariatHeader)
  //       .end((err, res) => {
  //         if (err) {
  //           done(err)
  //         }

  //         expect(res).to.have.status(400)
  //         expect(res).to.have.property('body').and.to.be.a('object')
  //         const errObj = error.yearRangeExists(year22)
  //         expect(res.body.error).to.equal(errObj.error)
  //         expect(res.body.message).to.equal(errObj.message)
  //         done()
  //       })
  //   })
  // })
})
