const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const userAHeader = require('./mockObjects.non-sequential').userAHeader
const orgA = require('./mockObjects.non-sequential').orgA
const userA = require('./mockObjects.non-sequential').userA
const secretariatOrg = require('./mockObjects.non-sequential').secretariatOrg
const secretariatUser = require('./mockObjects.non-sequential').secretariatUser
const year = require('./mockObjects.non-sequential').year
const reservedByOther = require('../../../test-utils/reserveCaseE.non-sequential').reservedByOther
const errors = require('../../../src/controller/cve-id.controller/error')
const error = new errors.CveIdControllerError()
const testRepo = require('../../../test-utils/repositories')
const cveIdTestRepo = new testRepo.CveIdReservePoolIncremented10IdsCaseE()
const cveIdRangeTestRepo = new testRepo.CveIdRangeReserveNonSequentialSuccessCaseE()

describe('Test ID Reservator for Non-Sequential Case E', () => {
  context('Case E', () => {
    it('Pool is incremented and 3 ids are reserved (partial error)', (done) => {
      chai.request(server)
        .post(`/cve-id-reserve-e-pool-incremented-3-ids?short_name=${orgA.short_name}&cve_year=${year}&amount=5&batch_type=non-sequential`)
        .set(userAHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          const quotaHeader = (orgA.policies.id_quota - 3).toString()
          expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

          expect(res).to.have.status(206)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.reservedPartialAmount(3, res.body.cve_ids)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(3)

          // check that the reserved cve ids were reserved by userA
          res.body.cve_ids.forEach(obj => {
            const index = parseInt(obj.cve_id.match(/\d+$/g))
            expect(index).to.be.greaterThan(0).and.lessThan(8) // Available id range: CVE-YYYY-20001 to CVE-YYYY-20007
            expect(obj).to.have.property('state').and.to.equal('RESERVED') // checking that all CVE IDs returned are RESERVED
            expect(obj).to.have.property('owning_cna').and.to.equal(orgA.short_name)
            expect(obj).to.have.nested.property('requested_by.cna').and.to.equal(orgA.short_name)
            expect(obj).to.have.nested.property('requested_by.user').and.to.equal(userA.username)
          })

          // check that no duplicate cve ids were reserved
          res.body.cve_ids.forEach(id1 => {
            let counter = 0
            res.body.cve_ids.forEach(id2 => {
              if (id1 === id2) {
                counter++
              }
            })
            expect(counter).to.equal(1)
          })

          // check total count of reserved ids by userA
          const docs = cveIdTestRepo.getCveIdDocuments()
          let reservedCounter = 0
          docs.forEach(doc => {
            if (doc.owning_cna === orgA.UUID && doc.cve_year === year && doc.state === 'RESERVED') {
              reservedCounter++
            }
          })
          expect(reservedCounter).to.equal(3)

          // check count of available ids
          let availableCounter = 0
          docs.forEach(doc => {
            if (doc.cve_year === year && doc.state === 'AVAILABLE') {
              availableCounter++
            }
          })
          expect(availableCounter).to.equal(0)

          // check that unreserved ids by userA are reserved
          const rangeDoc = cveIdRangeTestRepo.getCveIdRange()
          const topId = rangeDoc.ranges.general.top_id
          const reservedDocs = []

          for (let i = 0; i < docs.length; i++) {
            for (let j = 0; j < reservedByOther.length; j++) {
              if (docs[i].cve_id === reservedByOther[j] && docs[i].cve_year === year) {
                reservedDocs.push(docs[i])
                break
              }
            }
          }
          expect(reservedDocs).to.have.lengthOf(4)
          reservedDocs.forEach(obj => {
            const index = parseInt(obj.cve_id.match(/\d+$/g))
            expect(index).to.be.lessThan(topId + 1) // check that the id is less than the current top id
            expect(obj).to.have.property('state').and.to.equal('RESERVED')
            expect(obj).to.have.property('owning_cna').and.to.equal(secretariatOrg.UUID)
            expect(obj).to.have.nested.property('requested_by.cna').and.to.equal(secretariatUser.org_UUID)
            expect(obj).to.have.nested.property('requested_by.user').and.to.equal(secretariatUser.UUID)
          })

          done()
        })
    })
  })
})
