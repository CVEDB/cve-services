const express = require('express')
const app = express()
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))

// Body Parser Middleware
app.use(express.json()) // Allows us to handle raw JSON data
app.use(express.urlencoded({ extended: false })) // Allows us to handle url encoded data
const middleware = require('../../../src/middleware/middleware')
app.use(middleware.createCtxAndReqUUID)

const ids = []
const cveIdNonSeqFixtures = require('./mockObjects.non-sequential')
const cveIdControllerB = require('../../../test-utils/reserveCaseB.non-sequential')
const cveIdParams = require('../../../src/controller/cve-id.controller/cve-id.middleware')
const repos = require('../../../test-utils/repositories')
const cveIdTestRepo = new repos.CveIdReservePoolIncremented10IdsCaseB()
const cveIdRangeTestRepo = new repos.CveIdRangeReserveNonSequentialSuccessCaseB()

describe('Test ID Reservator for Non-Sequential Case B', () => {
  context('Case B', () => {
    it('Pool is incremented, reservation fails, pool is updated, pool is incremented, and 10 ids are reserved', (done) => {
      app.route('/cve-id-reserve-b-pool-incremented-reservation-fails')
        .post((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new repos.CveIdReservePoolIncremented10IdsCaseB() },
            getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveNonSequentialSuccessCaseB() },
            getUserRepository: () => { return new repos.UserReserveNonSequentialSuccessCaseB() },
            getOrgRepository: () => { return new repos.OrgReserveNonSequentialSuccessCaseB() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parsePostParams, cveIdControllerB.CVEID_RESERVE)

      chai.request(app)
        .post(`/cve-id-reserve-b-pool-incremented-reservation-fails?short_name=${cveIdNonSeqFixtures.orgA.short_name}&cve_year=${cveIdNonSeqFixtures.year}&amount=10&batch_type=non-sequential`)
        .set(cveIdNonSeqFixtures.userAHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          const quotaHeader = (cveIdNonSeqFixtures.orgA.policies.id_quota - 10).toString()
          expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(10)

          // check that the reserved cve ids were reserved by userA
          res.body.cve_ids.forEach(obj => {
            ids.push(obj.cve_id)
            const index = parseInt(obj.cve_id.match(/\d+$/g))
            expect(index).to.be.greaterThan(20000).and.lessThan(20131) // Available id range: CVE-YYYY-20001 to CVE-YYYY-20130
            expect(obj).to.have.property('state').and.to.equal('RESERVED') // checking that all CVE IDs returned are RESERVED
            expect(obj).to.have.property('owning_cna').and.to.equal(cveIdNonSeqFixtures.orgA.short_name)
            expect(obj).to.have.nested.property('requested_by.cna').and.to.equal(cveIdNonSeqFixtures.orgA.short_name)
            expect(obj).to.have.nested.property('requested_by.user').and.to.equal(cveIdNonSeqFixtures.userA.username)
          })

          // check that no duplicate cve ids were reserved
          res.body.cve_ids.forEach(id1 => {
            let counter = 0
            res.body.cve_ids.forEach(id2 => {
              if (id1 === id2) {
                counter++
              }
            })
            expect(counter).to.equal(1)
          })

          // check total count of reserved ids by userA
          const docs = cveIdTestRepo.getCveIdDocuments()
          let reservedCounter = 0
          docs.forEach(doc => {
            if (doc.owning_cna === cveIdNonSeqFixtures.orgA.UUID && doc.cve_year === cveIdNonSeqFixtures.year && doc.state === 'RESERVED') {
              reservedCounter++
            }
          })
          expect(reservedCounter).to.equal(10)

          // check count of available ids
          let availableCounter = 0
          docs.forEach(doc => {
            if (doc.cve_year === cveIdNonSeqFixtures.year && doc.state === 'AVAILABLE') {
              availableCounter++
            }
          })
          expect(availableCounter).to.equal(100)

          // check that reserved ids by secretariat are reserved
          const rangeDoc = cveIdRangeTestRepo.getCveIdRange()
          const topId = rangeDoc.ranges.general.top_id
          const reservedDocs = []

          for (let i = 0; i < docs.length; i++) {
            for (let j = 0; j < cveIdControllerB.reservedByOther.length; j++) {
              if (docs[i].cve_id === cveIdControllerB.reservedByOther[j] && docs[i].cve_year === cveIdNonSeqFixtures.year) {
                reservedDocs.push(docs[i])
                break
              }
            }
          }
          expect(reservedDocs).to.have.lengthOf(20)
          reservedDocs.forEach(obj => {
            ids.push(obj.cve_id)
            const index = parseInt(obj.cve_id.match(/\d+$/g))
            expect(index).to.be.lessThan(topId + 1) // check that the id is less than the current top id
            expect(obj).to.have.property('state').and.to.equal('RESERVED')
            expect(obj).to.have.property('owning_cna').and.to.equal(cveIdNonSeqFixtures.secretariatOrg.UUID)
            expect(obj).to.have.nested.property('requested_by.cna').and.to.equal(cveIdNonSeqFixtures.secretariatUser.org_UUID)
            expect(obj).to.have.nested.property('requested_by.user').and.to.equal(cveIdNonSeqFixtures.secretariatUser.UUID)
          })

          // check that no duplicate cve ids were reserved
          reservedDocs.forEach(id1 => {
            let counter = 0
            reservedDocs.forEach(id2 => {
              if (id1 === id2) {
                counter++
              }
            })
            expect(counter).to.equal(1)
          })

          // check that unreserved ids by userA and secretariat are available
          const availableDocs = []
          for (let i = 0; i < docs.length; i++) {
            let contains = false
            for (let j = 0; j < ids.length; j++) {
              if (docs[i].cve_id === ids[j] && docs[i].cve_year === cveIdNonSeqFixtures.year) {
                contains = true
                break
              }
            }
            if (!contains) {
              availableDocs.push(docs[i])
            }
          }

          expect(availableDocs).to.have.lengthOf(100)
          availableDocs.forEach(obj => {
            const index = parseInt(obj.cve_id.match(/\d+$/g))
            expect(index).to.be.lessThan(topId + 1) // check that the id is less than the current top id
            expect(obj).to.have.property('state').and.to.equal('AVAILABLE')
            expect(obj).to.have.property('owning_cna').and.to.equal('N/A')
            expect(obj).to.have.nested.property('requested_by.cna').and.to.equal('N/A')
            expect(obj).to.have.nested.property('requested_by.user').and.to.equal('N/A')
          })

          done()
        })
    })
  })
})
