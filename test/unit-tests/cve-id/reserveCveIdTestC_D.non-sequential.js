const express = require('express')
const app = express()
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))

// Body Parser Middleware
app.use(express.json()) // Allows us to handle raw JSON data
app.use(express.urlencoded({ extended: false })) // Allows us to handle url encoded data
const middleware = require('../../../src/middleware/middleware')
app.use(middleware.createCtxAndReqUUID)

const errors = require('../../../src/controller/cve-id.controller/error')
const error = new errors.CveIdControllerError()

const cveIdNonSeqFixtures = require('./mockObjects.non-sequential')
const cveIdController = require('../../../src/controller/cve-id.controller/cve-id.controller')
const cveIdParams = require('../../../src/controller/cve-id.controller/cve-id.middleware')
const repos = require('../../../test-utils/repositories')
const cveIdTestRepo = new repos.CveIdReservePoolIncremented10IdsCaseCD()

describe('Test ID Reservator for Non-Sequential Cases C and D', () => {
  context('Case C', () => {
    it('Pool is incremented and 10 ids are reserved', (done) => {
      app.route('/cve-id-reserve-c-pool-incremented-10-ids')
        .post((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new repos.CveIdReservePoolIncremented10IdsCaseCD() },
            getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveNonSequentialSuccessCaseC() },
            getUserRepository: () => { return new repos.UserReserveNonSequentialSuccess() },
            getOrgRepository: () => { return new repos.OrgReserveNonSequentialSuccess() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

      chai.request(app)
        .post(`/cve-id-reserve-c-pool-incremented-10-ids?short_name=${cveIdNonSeqFixtures.orgA.short_name}&cve_year=${cveIdNonSeqFixtures.year}&amount=10&batch_type=non-sequential`)
        .set(cveIdNonSeqFixtures.userAHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          const quotaHeader = (cveIdNonSeqFixtures.orgA.policies.id_quota - 10).toString()
          expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(10)

          // check that the reserved cve ids were reserved by userA
          res.body.cve_ids.forEach(obj => {
            const index = parseInt(obj.cve_id.match(/\d+$/g))
            expect(index).to.be.greaterThan(0).and.lessThan(11) // Available id range: CVE-YYYY-20001 to CVE-YYYY-20010
            expect(obj).to.have.property('state').and.to.equal('RESERVED') // checking that all CVE IDs returned are RESERVED
            expect(obj).to.have.property('owning_cna').and.to.equal(cveIdNonSeqFixtures.orgA.short_name)
            expect(obj).to.have.nested.property('requested_by.cna').and.to.equal(cveIdNonSeqFixtures.orgA.short_name)
            expect(obj).to.have.nested.property('requested_by.user').and.to.equal(cveIdNonSeqFixtures.userA.username)
          })

          // check that no duplicate cve ids were reserved
          res.body.cve_ids.forEach(id1 => {
            let counter = 0
            res.body.cve_ids.forEach(id2 => {
              if (id1 === id2) {
                counter++
              }
            })
            expect(counter).to.equal(1)
          })

          // check total count of reserved ids by userA
          const docs = cveIdTestRepo.getCveIdDocuments()
          let reservedCounter = 0
          docs.forEach(doc => {
            if (doc.owning_cna === cveIdNonSeqFixtures.orgA.UUID && doc.cve_year === cveIdNonSeqFixtures.year && doc.state === 'RESERVED') {
              reservedCounter++
            }
          })
          expect(reservedCounter).to.equal(10)

          // check count of available ids
          let availableCounter = 0
          docs.forEach(doc => {
            if (doc.cve_year === cveIdNonSeqFixtures.year.toString() && doc.state === 'AVAILABLE') {
              availableCounter++
            }
          })
          expect(availableCounter).to.equal(0)
          done()
        })
    })
  })

  context('Case D', () => {
    it(`CveId Range document for year ${cveIdNonSeqFixtures.year} is full`, (done) => {
      app.route('/cve-id-reserve-d-year-full')
        .post((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new repos.CveIdReservePoolIncremented10IdsCaseCD() },
            getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveNonSequentialSuccessCaseD() },
            getUserRepository: () => { return new repos.NullUserRepo() },
            getOrgRepository: () => { return new repos.OrgReserveNonSequentialSuccessCaseD() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

      chai.request(app)
        .post(`/cve-id-reserve-d-year-full?short_name=${cveIdNonSeqFixtures.orgB.short_name}&cve_year=${cveIdNonSeqFixtures.year}&amount=5&batch_type=non-sequential`)
        .set(cveIdNonSeqFixtures.userBHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          const quotaHeader = cveIdNonSeqFixtures.orgB.policies.id_quota.toString()
          expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.yearRangeFull(cveIdNonSeqFixtures.year)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)

          // check total count of reserved ids by userB
          const docs = cveIdTestRepo.getCveIdDocuments()
          let reservedCounter = 0
          docs.forEach(doc => {
            if (doc.owning_cna === cveIdNonSeqFixtures.orgB.UUID && doc.cve_year === cveIdNonSeqFixtures.year && doc.state === 'RESERVED') {
              reservedCounter++
            }
          })
          expect(reservedCounter).to.equal(0)

          // check count of available ids
          let availableCounter = 0
          docs.forEach(doc => {
            if (doc.cve_year === cveIdNonSeqFixtures.year && doc.state === 'AVAILABLE') {
              availableCounter++
            }
          })
          expect(availableCounter).to.equal(0)
          done()
        })
    })
  })
})
