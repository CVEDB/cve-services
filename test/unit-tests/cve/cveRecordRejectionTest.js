const express = require('express')
const app = express()
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))

// Body Parser Middleware
app.use(express.json()) // Allows us to handle raw JSON data
app.use(express.urlencoded({ extended: false })) // Allows us to handle url encoded data
const middleware = require('../../../src/middleware/middleware')
app.use(middleware.createCtxAndReqUUID)

const errors = require('../../../src/controller/cve.controller/error')
const error = new errors.CveControllerError()
const cveFixtures = require('./mockObjects.cve')
const cveController = require('../../../src/controller/cve.controller/cve.controller')
const cveParams = require('../../../src/controller/cve.controller/cve.middleware')

const rejectedBody = require('../../../test-http/src/test/cve_tests/cve_record_fixtures/rejectBody.json')
const nonExistentId = 'CVE-1800-0001'
const cveIdReserved = 'CVE-2017-5835'

class MyOrg {
    async getOrgUUID(shortName) {
        if (shortName === cveFixtures.regularOrg.short_name) {
            return cveFixtures.regularOrg.UUID
        }
        return null
    }

    async isSecretariat(org) {
        if (org === cveFixtures.secretariatHeader['CVE-API-ORG']) {
            return true
        }
        return null
    }

    async findOneByUUID() {
        return cveFixtures.secretariatOrg
    }
}

class MyUser {
    async getUserUUID() {
        return null
    }
}

class MyCveNegativeTests {
    async findOneByCveId(id) {
        return null
    }

    async updateByCveId() {
        return null
    }
}

class MyCveIdNegativeTests {
    async findOneByCveId(id) {
        return null
    }

    async updateByCveId() {
        return null
    }
}

class MyCveIdPositiveTests {
    async findOneByCveId() {
        // const cveId = Object.assign({}, cveFixtures.cveRejected5)
        // cveId.owning_cna = cveFixtures.regularOrg.UUID
        // return cveId
        return cveFixtures.cveRejected5
    }

    async updateByCveId() {
        return null
    }
}

class MyCvePositiveTests {
    async findOneByCveId() {
        return null
    }

    async updateByCveId() {
        return null
    }
}

app.route('/cve-reject-negative-tests/:id')
    .post((req, res, next) => {
        const factory = {
            getCveRepository: () => { return new MyCveNegativeTests() },
            getCveIdRepository: () => { return new MyCveIdNegativeTests() },
            getOrgRepository: () => { return new MyOrg() },
            getUserRepository: () => { return new MyUser() }
        }
        req.ctx.repositories = factory
        next()
    }, cveParams.parsePostParams, cveController.CVE_REJECT_RECORD)

app.route('/cve-reject-positive-tests/:id')
    .post((req, res, next) => {
        const factory = {
            getCveIdRepository: () => { return new MyCveIdPositiveTests() },
            getCveRepository: () => { return new MyCvePositiveTests() },
            getOrgRepository: () => { return new MyOrg() },
            getUserRepository: () => { return new MyUser() }
        }
        req.ctx.repositories = factory
        next()
    }, cveParams.parsePostParams, cveController.CVE_REJECT_RECORD)

describe('Testing the POST /cve/:id/reject endpoint in Cve Controller', () => {
    context('Negative Tests', () => {
        it('Submit a reject request for record that dne, returns 400', (done) => {
            chai.request(app)
                .post(`/cve-reject-negative-tests/${nonExistentId}`)
                .set(cveFixtures.secretariatHeader)
                .send(rejectedBody)
                .end((err, res) => {
                    if (err) {
                        done(err)
                    }

                    expect(res).to.have.status(400)
                    expect(res).to.have.property('body').and.to.be.a('object')
                    const errObj = error.cveDne()
                    expect(res.body.error).to.equal(errObj.error)
                    expect(res.body.message).to.equal(errObj.message)
                    done()
                })
        })
    })

    context('Positive Tests', () => {
        it('Reject record', (done) => {
            chai.request(app)
                .post(`/cve-reject-positive-tests/${cveIdReserved}`)
                .set(cveFixtures.secretariatHeader)
                .send(rejectedBody)
                .end((err, res) => {
                    if (err) {
                        done(err)
                    }
                    console.log(res)
                    expect(res).to.have.status(200)
                    done()
                })
        })
    })
})
