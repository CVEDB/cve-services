const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))

const cveFixtures = require('./mockObjects.cve')
const cveController = require('../../../src/controller/cve.controller/cve.controller')
const cveParams = require('../../../src/controller/cve.controller/cve.middleware')
const CONSTANTS = require('../../../src/constants')
const cveList = require('../../schemas/4.0/cveRecordList.json')

describe('Testing the GET /cve endpoint in Cve Controller', () => {
  context('Positive Tests', () => {
    it('JSON schema v4.0 returned: The secretariat gets a list of cve records', (done) => {
      class MyCvePositiveTests {
        async aggregatePaginate () {
          const res = {
            itemsList: cveList,
            itemCount: cveList.length,
            itemsPerPage: CONSTANTS.PAGINATOR_OPTIONS.limit,
            currentPage: 1,
            pageCount: 1,
            pagingCounter: 1,
            hasPrevPage: false,
            hasNextPage: false,
            prevPage: null,
            nextPage: null
          }

          return res
        }
      }

      server.route('/cve-get-all-records-positive-tests-non-empty')
        .get((req, res, next) => {
          const factory = {
            getCveRepository: () => { return new MyCvePositiveTests() }
          }
          req.ctx.repositories = factory
          next()
        }, cveParams.parseGetParams, cveController.CVE_LIST_ALL)

      chai.request(server)
        .get('/cve-get-all-records-positive-tests-non-empty')
        .set(cveFixtures.secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('totalCount').and.to.equal(cveList.length)
          expect(res.body).to.have.property('cveRecords').and.to.be.a('array')
          expect(res.body.cveRecords).to.have.lengthOf(res.body.totalCount)
          res.body.cveRecords.forEach(obj => {
            // only cve records with state 'PUBLIC' or 'REJECTED' are stored in the db
            expect(obj).to.have.nested.property('CVE_data_meta.STATE').and.to.be.oneOf([CONSTANTS.CVE_STATES.PUBLIC, CONSTANTS.CVE_STATES.REJECT])
          })
          done()
        })
    })

    it('JSON schema v4.0 returned: The secretariat gets an empty list of cve records because there are no cve records in the database', (done) => {
      class MyCvePositiveTests {
        async aggregatePaginate () {
          const res = {
            itemsList: [],
            itemCount: 0,
            itemsPerPage: CONSTANTS.PAGINATOR_OPTIONS.limit,
            currentPage: 1,
            pageCount: 1,
            pagingCounter: 1,
            hasPrevPage: false,
            hasNextPage: false,
            prevPage: null,
            nextPage: null
          }

          return res
        }
      }

      server.route('/cve-get-all-records-positive-tests-empty')
        .get((req, res, next) => {
          const factory = {
            getCveRepository: () => { return new MyCvePositiveTests() }
          }
          req.ctx.repositories = factory
          next()
        }, cveParams.parseGetParams, cveController.CVE_LIST_ALL)

      chai.request(server)
        .get('/cve-get-all-records-positive-tests-empty')
        .set(cveFixtures.secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('totalCount').and.to.equal(0)
          expect(res.body).to.have.property('cveRecords').and.to.be.a('array')
          expect(res.body.cveRecords).to.have.lengthOf(res.body.totalCount)
          done()
        })
    })
  })
})
