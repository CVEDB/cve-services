# Tests in this file use an Org admin user provided by a Pytest fixture. The
# tests here should be a subset of the secretariat tests, since the CNA of last
# resort should always be able to perform any root CNA functionality in
# addition to functionality reserved for the CNA of last resort.
import json
import requests
import uuid
from src import env, utils
from src.test.org import (ORG_URL, create_new_user_with_new_org_by_uuid,
                            create_new_user_with_new_org_by_shortname,
                            post_new_org_user, post_new_org)
from src.utils import (assert_contains, ok_response_contains,
                       ok_response_contains_json, response_contains,
                       response_contains_json)


# PUT /org/:shortname/user/:username
def test_regular_user_update_name_and_username(reg_user_headers):
    """  regular users can update their name & username """
    org = reg_user_headers['CVE-API-ORG']
    user = reg_user_headers['CVE-API-USER']
    new_username = str(uuid.uuid4())    # used in query
    new_name = str(uuid.uuid4())   # used in query
    res = requests.put(
        f'{env.AWG_BASE_URL}{ORG_URL}/{org}/user/{user}?new_username={new_username}&name.first={new_name}',
        headers=reg_user_headers
    )
    assert res.status_code == 200
    assert json.loads(res.content.decode())['updated']['username'] is not None
    assert json.loads(res.content.decode())['updated']['username'] == new_username


# PUT /org/:shortname/user/:username
def test_regular_user_cannot_update_for_another_user(reg_user_headers):
    """ regular users cannot update information of another user of the same organization """
    org = reg_user_headers['CVE-API-ORG']
    user = reg_user_headers['CVE-API-USER']
    user2 = str(uuid.uuid4())
    res = post_new_org_user(org, user2) # creating a user with same org as regular user
    assert res.status_code == 200
    user_name = str(uuid.uuid4()) # create a new name to give to second user
    res = requests.put(
        f'{env.AWG_BASE_URL}{ORG_URL}/{org}/user/{user2}?new_username={user_name}',
        headers=reg_user_headers
    )
    assert res.status_code == 403
    response_contains_json(res, 'error', 'NOT_SAME_USER_OR_SECRETARIAT')
    

# PUT /org/:shortname/user/:username
def test_regular_user_cannot_update_duplicate_user_with_new_username(reg_user_headers):
    """ regular users cannot update a user's username if that user already exist """
    org = reg_user_headers['CVE-API-ORG']
    user1 = reg_user_headers['CVE-API-USER']
    user2 = str(uuid.uuid4())
    res = post_new_org_user(org, user2) # creating a user with same org as regular user
    assert res.status_code == 200
    res = requests.put(
        f'{env.AWG_BASE_URL}{ORG_URL}/{org}/user/{user1}?new_username={user2}',
        headers=reg_user_headers
    )
    assert res.status_code == 403
    response_contains_json(res, 'error', 'DUPLICATE_USERNAME')


# PUT /org/:shortname/user/:username
def test_regular_user_cannot_update_organization_with_new_shortname(reg_user_headers):
    """ regular users cannot update organization """
    user = reg_user_headers['CVE-API-USER']
    org1 = reg_user_headers['CVE-API-ORG']
    org2 = str(uuid.uuid4())
    res = requests.put(
        f'{env.AWG_BASE_URL}{ORG_URL}/{org1}/user/{user}?org_shortname={org2}',
        headers=reg_user_headers
    )
    assert res.status_code == 403
    response_contains_json(res, 'error', 'NOT_ORG_ADMIN_OR_SECRETARIAT')


# PUT /org/:shortname/user/:username
def test_regular_user_cannot_update_active_state(reg_user_headers):
    """ regular user cannot change its own active state """
    org = reg_user_headers['CVE-API-ORG']
    user = reg_user_headers['CVE-API-USER']
    res = requests.put(
        f'{env.AWG_BASE_URL}{ORG_URL}/{org}/user/{user}?active=false',
        headers=reg_user_headers
    )
    assert res.status_code == 403


# PUT /org/:shortname/user/:username
def test_regular_user_cannot_add_role(reg_user_headers):
    """  regular users cannot add role """
    org = reg_user_headers['CVE-API-ORG']
    user = reg_user_headers['CVE-API-USER']
    res = requests.put(
        f'{env.AWG_BASE_URL}{ORG_URL}/{org}/user/{user}?active_roles.add=admin', # adding role
        headers=reg_user_headers
    )
    assert res.status_code == 403


# PUT /org/:shortname/user/:username
def test_regular_user_cannot_remove_role(reg_user_headers):
    """  regular users cannot remove role """ 
    org = reg_user_headers['CVE-API-ORG']
    user = reg_user_headers['CVE-API-USER']
    res = requests.put(
        f'{env.AWG_BASE_URL}{ORG_URL}/{org}/user/{user}?active_roles.remove=admin', # removing role
        headers=reg_user_headers
    )
    assert res.status_code == 403


# PUT /org/:shortname/user/:username
def test_regular_user_cannot_update_user_org_dne(reg_user_headers):
    """ regular user cannot update a user from an org that doesn't exist """
    org = str(uuid.uuid4())
    user = reg_user_headers['CVE-API-USER']
    res = requests.put(
        f'{env.AWG_BASE_URL}{ORG_URL}/{org}/user/{user}',
        headers=reg_user_headers
    )
    assert res.status_code == 404
    response_contains_json(res, 'error', 'ORG_DNE_PARAM')


# PUT /org/:shortname/user/:username
def test_reg_user_cannot_update_user_dne(reg_user_headers):
    """ regular user cannot update a user that doesn't exist """
    org = reg_user_headers['CVE-API-ORG']
    user = str(uuid.uuid4())
    res = requests.put(
        f'{env.AWG_BASE_URL}{ORG_URL}/{org}/user/{user}',
        headers=reg_user_headers
    )
    assert res.status_code == 404
    response_contains_json(res, 'error', 'USER_DNE')


#### GET /org/:shortname/user/:username ####
def test_reg_user_can_view_users_same_org(reg_user_headers):
    """ regular users can view users of the same organization """
    org = reg_user_headers['CVE-API-ORG']
    user = str(uuid.uuid4())
    res = post_new_org_user(org, user)
    assert res.status_code == 200
    res = requests.get(
        f'{env.AWG_BASE_URL}{ORG_URL}/{org}/user/{user}',
        headers=reg_user_headers
    )
    ok_response_contains_json(res, 'username', user)


def test_reg_user_cannot_view_user_from_another_org(reg_user_headers):
    """ regular users cannot view users from another organization """
    org, user = create_new_user_with_new_org_by_uuid()
    res = requests.get(
        f'{env.AWG_BASE_URL}{ORG_URL}/{org}/user/{user}',
        headers=reg_user_headers
    )
    assert res.status_code == 403
    response_contains_json(res, 'error', 'NOT_SAME_ORG_OR_SECRETARIAT')


def test_reg_user_cannot_view_user_dne(reg_user_headers):
    """ regular user cannot view user that doesn't exist """
    org = reg_user_headers['CVE-API-ORG']
    user = str(uuid.uuid4())
    res = requests.get(
        f'{env.AWG_BASE_URL}{ORG_URL}/{org}/user/{user}',
        headers=reg_user_headers
    )
    assert res.status_code == 404
    response_contains_json(res, 'error', 'USER_DNE')
