const mongoose = require('mongoose')
const aggregatePaginate = require('mongoose-aggregate-paginate-v2')

const schema = {
  _id: false,
  time: {
    created: Date,
    modified: Date
  },
  cve: Object
}

const CveSchema = new mongoose.Schema(schema, { collection: 'Cve', timestamps: { createdAt: 'time.created', updatedAt: 'time.modified' }, })

CveSchema.query.byCveId = function (cveId) {
  return this.where({ 'cve.cveMetadata.id': cveId })
}

CveSchema.plugin(aggregatePaginate)
const Cve = mongoose.model('Cve', CveSchema)

function createRecordBase() {
  const baseRecord = {
    dataType: 'CVE_RECORD',
    dataVersion: '5.0',
  }
  return baseRecord
}

function createCveMetadata(id, assigner, state) {
  const cveMetadata = {
    cveMetadata: { id: id, assigner: assigner, state: state }
  }
  return cveMetadata
}

function createProviderMetadata(orgId, shortName) {
  const providerMetadata = {
    providerMetadata: {orgId: orgId, shortName: shortName, dateUpdated: Date.now() }
  }
  return providerMetadata
}

CveSchema.methods.newRejectedCve = function newRejectedCve(id, assigner, descriptions, replacedBy, orgId, shortName) {
  const baseRecord = createRecordBase()
  const cveMetadata = createCveMetadata(id, assigner, CONSTANTS.CVE_STATES.REJECTED)
  const providerMetadata = createProviderMetadata(orgId, shortName)

  const cnaRejectedContainer = {
    providerMetadata,
    descriptions: descriptions,
    replacedBy: replacedBy
  }

  const finalRecord = {
    baseRecord,
    cveMetadata,
    containers: {
      cna: cnaRejectedContainer
    }
  }

  return finalRecord
}

module.exports = Cve
