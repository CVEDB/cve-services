const mongoose = require('mongoose')
const aggregatePaginate = require('mongoose-aggregate-paginate-v2')
const fs = require('fs')
const cveSchemaV5 = JSON.parse(fs.readFileSync('src/middleware/5.0_bundled_schema.json'))
const Ajv = require('ajv')
const addFormats = require('ajv-formats')
const ajv = new Ajv({ allErrors: true })
addFormats(ajv)
const validate = ajv.compile(cveSchemaV5)
const CONSTANTS = require('../constants')

const schema = {
  _id: false,
  time: {
    created: Date,
    modified: Date
  },
  cve: Object
}

const CveSchema = new mongoose.Schema(schema, { collection: 'Cve', timestamps: { createdAt: 'time.created', updatedAt: 'time.modified' } })

CveSchema.query.byCveId = function (cveId) {
  return this.where({ 'cve.cveMetadata.cveId': cveId })
}

CveSchema.statics.validateCveRecord = function (record) {
  const result = validate(record)
  if (result) {
    return true
  }
  return false
}

function createBaseCveMetadata (id, assigner, state) {
  const baseRecord = {
    dataType: 'CVE_RECORD',
    dataVersion: '5.0',
    cveMetadata: {
      cveId: id,
      assignerOrgId: assigner,
      state: state
    }
  }
  return baseRecord
}

CveSchema.statics.newPublishedCve = function (id, assigner, cnaContainer, sysProvidedCveMetadata = {}, sysProvidedProviderMetadata = {}) {
  const baseRecord = createBaseCveMetadata(id, assigner, CONSTANTS.CVE_STATES.PUBLISHED)

  const newCveMetadata = {
    ...baseRecord.cveMetadata,
    ...sysProvidedCveMetadata
  }

  baseRecord.cveMetadata = newCveMetadata

  cnaContainer.providerMetadata = {
    orgId: assigner,
    ...sysProvidedProviderMetadata
  }

  baseRecord.containers = { cna: cnaContainer }

  return baseRecord
}

CveSchema.plugin(aggregatePaginate)
const Cve = mongoose.model('Cve', CveSchema)

module.exports = Cve
