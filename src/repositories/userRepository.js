const BaseRepository = require('./baseRepository')
const User = require('../model/user')
const utils = require('../utils/utils')

class UserRepository extends BaseRepository {
  constructor () {
    super(User)
  }

  async getUserUUID (userName, orgUUID) {
    return utils.getUserUUID(userName, orgUUID)
  }

  async findOneByUUID (UUID) {
    return this.collection.findOne().byUUID(UUID)
  }

  async findOneByUserNameAndOrgUUID (userName, orgUUID) {
    return this.collection.findOne().byUserNameAndOrgUUID(userName, orgUUID)
  }

  async updateByUserNameAndOrgUUID (username, orgUUID, user, options = {}) {
    return this.collection.findOneAndUpdate().byUserNameAndOrgUUID(username, orgUUID).updateOne(user).setOptions(options)
  }

  async isOrgAdmin (username, orgUUID) {
    let result = false
    const user = this.collection.findOne().byUserNameAndOrgUUID(username, orgUUID)
    if (user) {
      const roles = user.authority.active_roles
      roles.forEach((x) => {
        if (x === 'ADMIN') {
          result = true
        }
      })
    }
    return result
  }
}

module.exports = UserRepository
