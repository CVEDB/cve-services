const swaggerAutogen = require('swagger-autogen')({ openapi: '3.0.2' })
const outputFile = 'api-docs/swagger.json'
const endpointsFiles = [
  'src/controller/cve-id.controller/index.js',
  'src/controller/cve.controller/index.js',
  'src/controller/org.controller/index.js',
  'src/controller/user.controller/index.js'
]

const doc = {
  info: {
    version: '3.0.2',
    title: 'CVE Services API',
    description: 'The CVE services API which supports automation tooling for the CVE Project.'
  },
  basePath: '/api/',
  host: 'TODO: Add automation to set this to each environment',
  components: {
    examples: {
      apiSecret: {
        value: {
          'API-secret': 'string'
        }
      },
      createOrg200: {
        value: {
          message: 'mitre organization was successfully created.',
          created: {
            name: 'Mitre',
            short_name: 'mitre',
            UUID: '00000000-0000-0000-0000-000000000000',
            policies: {
              id_quota: 100000
            },
            authority: {
              active_roles: [
                'CNA'
              ]
            },
            time: {
              created: 'string',
              modified: 'string'
            }
          }
        }
      },
      createOrgRequestBody: {
        value: {
          short_name: 'mitre',
          name: 'Mitre',
          uuid: '00000000-0000-0000-0000-000000000000',
          authority: {
            active_roles: [
              'CNA'
            ]
          },
          policies: {
            id_quota: 100000
          }
        }
      },
      createUserRequestBody: {
        value: {
          username: 'test@mitre.org',
          name: {
            first: 'test',
            last: 'mitre',
            middle: 'test',
            suffix: 'test'
          },
          authority: {
            active_roles: [
              'ADMIN'
            ]
          }
        }
      },
      createUser200: {
        value: {
          message: 'test@mitre.org was successfully created.',
          created: {
            username: 'test@mitre.org',
            org_UUID: '00000000-0000-0000-0000-000000000000',
            UUID: '00000000-0000-0000-0000-000000000000',
            active: true,
            name: {
              first: 'test',
              last: 'mitre',
              middle: 'test',
              suffix: 'test'
            },
            secret: 'string',
            authority: {
              active_roles: [
                'ADMIN'
              ]
            },
            time: {
              created: 'string',
              modified: 'string'
            }
          }
        }
      },
      cveIdGetFiltered200: {
        value: {
          totalCount: 0,
          itemsPerPage: 0,
          pageCount: 0,
          currentPage: 0,
          prevPage: 0,
          nextPage: 0,
          cve_ids: [
            {
              cve_id: 'CVE-1999-0001',
              cve_year: '1999',
              owning_cna: 'mitre',
              state: 'RESERVED',
              requested_by: {
                cna: 'string',
                user: 'string'
              }
            }
          ]
        }
      },
      arrayOfCveIdsNoTime200: {
        value: {
          cve_ids: [
            {
              cve_id: 'CVE-1999-0001',
              cve_year: '1999',
              owning_cna: 'mitre',
              state: 'RESERVED',
              requested_by: {
                cna: 'string',
                user: 'string'
              },
              reserved: 'string'
            }
          ]
        }
      },
      cveId200: {
        value: {
          cve_id: 'CVE-1999-0001',
          cve_year: '1999',
          owning_cna: 'mitre',
          state: 'RESERVED',
          requested_by: {
            cna: 'string',
            user: 'string'
          },
          reserved: 'string',
          time: {
            created: 'string',
            modified: 'string'
          }
        }
      },
      errorBadInput: {
        value: {
          error: 'string',
          message: 'string',
          details: [
            {
              msg: 'string',
              param: 'string',
              location: 'string'
            }
          ]
        }
      },
      errorCveIds206: {
        value: {
          error: 'string',
          message: 'string',
          details: {
            amount_reserved: 0
          },
          cve_ids: [
            {
              cve_id: 'CVE-1999-0001',
              cve_year: '1999',
              owning_cna: 'mitre',
              state: 'RESERVED',
              requested_by: {
                cna: 'string',
                user: 'string'
              },
              reserved: 'string'
            }
          ]
        }
      },
      errorGeneric: {
        value: {
          error: 'string',
          message: 'string'
        }
      },
      idQuota200: {
        value: {
          id_quota: 1000,
          total_reserved: 100,
          available: 900
        }
      },
      internalServerError: {
        value: {
          error: 'SERVICE_NOT_AVAILABLE',
          message: 'This service appears to not be available.'
        }
      },
      org200: {
        value: {
          name: 'Mitre',
          short_name: 'mitre',
          UUID: '00000000-0000-0000-0000-000000000000',
          policies: {
            id_quota: 100000
          },
          authority: {
            active_roles: [
              'CNA'
            ]
          },
          time: {
            created: 'string',
            modified: 'string'
          }
        }
      },
      orgAll200: {
        value: {
          totalCount: 0,
          itemsPerPage: 0,
          pageCount: 0,
          currentPage: 0,
          prevPage: 0,
          nextPage: 0,
          organizations: [
            {
              name: 'string',
              short_name: 'string',
              UUID: 'string',
              policies: {
                id_quota: 100000
              },
              authority: {
                active_roles: [
                  'CNA'
                ]
              },
              time: {
                created: 'string',
                modified: 'string'
              }
            }
          ]
        }
      },
      updateCveId200: {
        value: {
          message: 'CVE-1999-0001 was successfully updated.',
          updated: {
            cve_id: 'CVE-1999-0001',
            cve_year: '1999',
            owning_cna: 'mitre',
            state: 'RESERVED',
            requested_by: {
              cna: 'string',
              user: 'string'
            },
            reserved: 'string',
            time: {
              created: 'string',
              modified: 'string'
            }
          }
        }
      },
      updateOrg200: {
        value: {
          message: 'mitre organization was successfully updated.',
          updated: {
            name: 'Mitre',
            short_name: 'mitre',
            UUID: '00000000-0000-0000-0000-000000000000',
            policies: {
              id_quota: 100000
            },
            authority: {
              active_roles: [
                'CNA'
              ]
            },
            time: {
              created: 'string',
              modified: 'string'
            }
          }
        }
      },
      updatedUser200: {
        value: {
          message: 'test@mitre.org  was successfully updated.',
          updated: {
            username: 'test@mitre.org',
            org_UUID: '00000000-0000-0000-0000-000000000000',
            UUID: '00000000-0000-0000-0000-000000000000',
            active: true,
            name: {
              first: 'test',
              last: 'mitre',
              middle: 'test',
              suffix: 'test'
            },
            authority: {
              active_roles: [
                'ADMIN'
              ]
            },
            time: {
              created: 'string',
              modified: 'string'
            }
          }
        }
      },
      userOrgAll200: {
        value: {
          totalCount: 0,
          itemsPerPage: 0,
          pageCount: 0,
          currentPage: 0,
          prevPage: 0,
          nextPage: 0,
          users: [
            {
              username: 'test@mitre.org',
              org_UUID: '00000000-0000-0000-0000-000000000000',
              UUID: '00000000-0000-0000-0000-000000000000',
              active: true,
              name: {
                first: 'test',
                last: 'mitre',
                middle: 'test',
                suffix: 'test'
              },
              authority: {
                active_roles: [
                  'ADMIN'
                ]
              },
              time: {
                created: 'string',
                modified: 'string'
              }
            }
          ]
        }
      },
      userNoSecret: {
        value: {
          username: 'test@mitre.org',
          org_UUID: '00000000-0000-0000-0000-000000000000',
          UUID: '00000000-0000-0000-0000-000000000000',
          active: true,
          name: {
            first: 'test',
            last: 'mitre',
            middle: 'test',
            suffix: 'test'
          },
          authority: {
            active_roles: [
              'ADMIN'
            ]
          },
          time: {
            created: 'string',
            modified: 'string'
          }
        }
      }
    },
    parameters: {
      active: {
        in: 'query',
        name: 'active',
        description: 'Update the active state of the user record.',
        required: false,
        schema: {
          type: 'boolean'
        }
      },
      active_roles_add: {
        in: 'query',
        name: 'active_roles.add',
        description: 'Add an active role to the organization.',
        required: false,
        schema: {
          type: 'string',
          enum: [
            'CNA',
            'SECRETARIAT',
            'ROOT_CNA',
            'ADP'
          ]
        }
      },
      active_roles_remove: {
        in: 'query',
        name: 'active_roles.remove',
        description: 'Remove an active role from the organization.',
        required: false,
        schema: {
          type: 'string',
          enum: [
            'CNA',
            'SECRETARIAT',
            'ROOT_CNA',
            'ADP'
          ]
        }
      },
      activeUserRolesAdd: {
        in: 'query',
        name: 'active_roles.add',
        description: 'Add an active role to the user.',
        required: false,
        schema: {
          type: 'string',
          enum: [
            'ADMIN'
          ]
        }
      },
      activeUserRolesRemove: {
        in: 'query',
        name: 'active_roles.remove',
        description: 'Remove an active role from the user.',
        required: false,
        schema: {
          type: 'string',
          enum: [
            'ADMIN'
          ]
        }
      },
      apiEntityHeader: {
        in: 'header',
        name: 'CVE-API-ORG',
        description: 'The shortname for the entity (e.g., CNA, ADP) that is authenticated or requesting authentication.',
        required: true,
        schema: {
          type: 'string'
        }
      },
      apiUserHeader: {
        in: 'header',
        name: 'CVE-API-USER',
        description: 'The username for the account that is making the request.',
        required: true,
        schema: {
          type: 'string'
        }
      },
      apiSecretHeader: {
        in: 'header',
        name: 'CVE-API-KEY',
        description: 'The user\'s API key.',
        required: true,
        schema: {
          type: 'string'
        }
      },
      amount: {
        in: 'query',
        name: 'amount',
        description: 'Amount of CVE IDs to reserve.',
        required: true,
        schema: {
          type: 'integer',
          format: 'int32'
        }
      },
      assigner: {
        in: 'query',
        name: 'assigner',
        description: 'Specify the UUID for the org to which the cve id was assigned.',
        required: true,
        schema: {
          type: 'string'
        }
      },
      assignerShortName: {
        in: 'query',
        name: 'assignerShortName',
        description: 'Get the short name for the org to which the cve id was assigned.',
        required: false,
        schema: {
          type: 'string'
        }
      },
      batch_type: {
        in: 'query',
        name: 'batch_type',
        description: 'When the amount is greater than one, it indicates whether the CVE IDs should be sequential or non-sequential.',
        required: false,
        schema: {
          type: 'string',
          enum: [
            'sequential',
            'non-sequential'
          ]
        }
      },
      countOnly: {
        in: 'query',
        name: 'count_only',
        description: 'Get count of records that match query. Accepted values are 0 and 1, representing False and True, respectively.',
        required: false,
        schema: {
          type: 'boolean'
        }
      },
      cveState: {
        in: 'query',
        name: 'state',
        description: 'Filter by CVE state.',
        schema: {
          type: 'string',
          enum: [
            'PUBLISHED',
            'REJECTED'
          ]
        }
      },
      cve_year: {
        in: 'query',
        name: 'cve_year',
        description: 'The year the CVE IDs will be reserved for. (i.e., 1999, ..., currentYear + 1)',
        required: true,
        schema: {
          type: 'integer',
          format: 'int32'
        }
      },
      cveIdGetFilteredState: {
        in: 'query',
        name: 'state',
        description: 'Filter by CVE state [RESERVED, PUBLISHED, REJECTED].',
        required: false,
        schema: {
          type: 'string'
        }
      },
      cveIdGetFilteredCveIdYear: {
        in: 'query',
        name: 'cve_id_year',
        description: 'Filter by the year in the CVE ID (YYYY).',
        required: false,
        schema: {
          type: 'integer',
          format: 'int32'
        }
      },
      cveIdGetFilteredTimeReservedLt: {
        in: 'query',
        name: 'time_reserved.lt',
        description: 'Get all CVE-ID records reserved before timestamp.',
        required: false,
        schema: {
          type: 'string',
          format: 'date-time'
        }
      },
      cveIdGetFilteredTimeReservedGt: {
        in: 'query',
        name: 'time_reserved.gt',
        description: 'Get all CVE-ID records reserved after timestamp.',
        required: false,
        schema: {
          type: 'string',
          format: 'date-time'
        }
      },
      cveIdGetFilteredTimeModifiedLt: {
        in: 'query',
        name: 'time_modified.lt',
        description: 'Get all CVE-ID records modified before timestamp.',
        required: false,
        schema: {
          type: 'string',
          format: 'date-time'
        }
      },
      cveIdGetFilteredTimeModifiedGt: {
        in: 'query',
        name: 'time_modified.gt',
        description: 'Get all CVE-ID records modified after timestamp.',
        required: false,
        schema: {
          type: 'string',
          format: 'date-time'
        }
      },
      cveRecordFilteredTimeModifiedLt: {
        in: 'query',
        name: 'time_modified.lt',
        description: 'Get all CVE records modified before timestamp.',
        required: false,
        schema: {
          type: 'string',
          format: 'date-time'
        }
      },
      cveRecordFilteredTimeModifiedGt: {
        in: 'query',
        name: 'time_modified.gt',
        description: 'Get all CVE records modified after timestamp.',
        required: false,
        schema: {
          type: 'string',
          format: 'date-time'
        }
      },
      id_quota: {
        in: 'query',
        name: 'id_quota',
        description: 'Update the number of CVE IDs the organization is allowed to have in the RESERVED state at one time.',
        required: false,
        schema: {
          type: 'integer',
          format: 'int32',
          minimum: 0,
          maximum: 100000
        }
      },
      name: {
        in: 'query',
        name: 'name',
        description: 'Update the name of the organization.',
        required: false,
        schema: {
          type: 'string'
        }
      },
      nameFirst: {
        in: 'query',
        name: 'name.first',
        description: 'Update the first name of the user record.',
        required: false,
        schema: {
          type: 'string'
        }
      },
      nameLast: {
        in: 'query',
        name: 'name.last',
        description: 'Update the last name of the user record.',
        required: false,
        schema: {
          type: 'string'
        }
      },
      nameMiddle: {
        in: 'query',
        name: 'name.middle',
        description: 'Update the middle name of the user record.',
        required: false,
        schema: {
          type: 'string'
        }
      },
      nameSuffix: {
        in: 'query',
        name: 'name.suffix',
        description: 'Update suffix of the user record.',
        required: false,
        schema: {
          type: 'string'
        }
      },
      newUsername: {
        in: 'query',
        name: 'new_username',
        description: 'Update the user name of the user record.',
        required: false,
        schema: {
          type: 'string'
        }
      },
      org: {
        in: 'query',
        name: 'org',
        description: 'Update the owning_cna of a CVE-ID record.',
        required: false,
        schema: {
          type: 'string'
        }
      },
      orgShortname: {
        in: 'query',
        name: 'org_shortname',
        description: 'Update the organization the user belongs to.',
        required: false,
        schema: {
          type: 'string'
        }
      },
      pageQuery: {
        in: 'query',
        name: 'page',
        description: 'The current page in the paginator.',
        required: false,
        schema: {
          type: 'integer',
          format: 'int32',
          minimum: 1
        }
      },
      short_name: {
        in: 'query',
        name: 'short_name',
        description: 'The CNA that will own the CVE IDs reserved.',
        required: true,
        schema: {
          type: 'string'
        }
      },
      shortname: {
        in: 'query',
        name: 'shortname',
        description: 'Update the short name of the organization.',
        required: false,
        schema: {
          type: 'string'
        }
      },
      state: {
        in: 'query',
        name: 'state',
        description: 'Update the state of a CVE-ID record.',
        required: false,
        schema: {
          type: 'string'
        }
      }
    }
  },
  definitions: {
    apiSecret: {
      type: 'object',
      properties: {
        'API-secret': {
          type: 'string',
          description: 'The new API key of the user.'
        }
      }
    },
    createOrg200: {
      type: 'object',
      properties: {
        message: {
          type: 'string',
          description: 'Success description'
        },
        created: {
          $ref: '#/definitions/org'
        }
      }
    },
    createOrgRequestBody: {
      type: 'object',
      required: [
        'short_name',
        'name'
      ],
      properties: {
        short_name: {
          type: 'string',
          description: 'The short name of the organization.'
        },
        name: {
          type: 'string',
          description: 'The name of the organization.'
        },
        uuid: {
          type: 'string',
          description: 'The organization identifier.'
        },
        authority: {
          type: 'object',
          properties: {
            active_roles: {
              type: 'array',
              items: {
                type: 'string',
                description: 'The active roles of the organization.',
                enum: [
                  'CNA',
                  'SECRETARIAT',
                  'ROOT_CNA',
                  'ADP'
                ]
              }
            }
          }
        },
        policies: {
          type: 'object',
          properties: {
            id_quota: {
              type: 'integer',
              format: 'int32',
              description: 'The CVE ID quota of the organization.',
              minimum: 0,
              maximum: 100000
            }
          }
        }
      }
    },
    createUserRequestBody: {
      type: 'object',
      properties: {
        username: {
          type: 'string',
          description: 'The user name of the user.',
          required: true
        },
        name: {
          type: 'object',
          properties: {
            first: {
              type: 'string',
              description: 'The first name of the user.'
            },
            last: {
              type: 'string',
              description: 'The last name of the user.'
            },
            middle: {
              type: 'string',
              description: 'The middle name of the user, if any.'
            },
            suffix: {
              type: 'string',
              description: 'The suffix of the user, if any.'
            }
          }
        },
        authority: {
          type: 'object',
          properties: {
            active_roles: {
              type: 'array',
              items: {
                type: 'string',
                description: 'The active roles of the user.',
                enum: [
                  'ADMIN'
                ]
              }
            }
          }
        }
      }
    },
    createUser200: {
      type: 'object',
      properties: {
        message: {
          type: 'string',
          description: 'Success description'
        },
        created: {
          $ref: '#/definitions/user'
        }
      }
    },
    cveId: {
      type: 'object',
      properties: {
        cve_id: {
          type: 'string',
          pattern: '^CVE-[0-9]{4}-[0-9]{4,}$'
        },
        cve_year: {
          type: 'string',
          pattern: '^[0-9]{4}$'
        },
        owning_cna: {
          type: 'string',
          description: 'The shortname for the organization that owns the CVE-ID.'
        },
        state: {
          type: 'string',
          enum: [
            'RESERVED',
            'PUBLISHED',
            'REJECTED'
          ]
        },
        requested_by: {
          type: 'object',
          properties: {
            cna: {
              type: 'string',
              description: 'The shortname for the organization of the user that requested the ID.'
            },
            user: {
              type: 'string',
              description: 'The username for the account that requested the ID.'
            }
          }
        },
        reserved: {
          type: 'string',
          format: 'date-time',
          description: 'The time the ID was reserved.'
        },
        time: {
          type: 'object',
          properties: {
            created: {
              type: 'string',
              format: 'date-time',
              description: 'The time the ID was created.'
            },
            modified: {
              type: 'string',
              format: 'date-time',
              description: 'The last time the ID was modified.'
            }
          }
        }
      }
    },
    cveIdNoTime: {
      type: 'object',
      properties: {
        cve_id: {
          type: 'string',
          pattern: '^CVE-[0-9]{4}-[0-9]{4,}$'
        },
        cve_year: {
          type: 'string',
          pattern: '^[0-9]{4}$'
        },
        owning_cna: {
          type: 'string',
          description: 'The shortname for the organization that owns the CVE-ID.'
        },
        state: {
          type: 'string',
          enum: [
            'RESERVED',
            'PUBLISHED',
            'REJECTED'
          ]
        },
        requested_by: {
          type: 'object',
          properties: {
            cna: {
              type: 'string',
              description: 'The shortname for the organization of the user that requested the ID.'
            },
            user: {
              type: 'string',
              description: 'The username for the account that requested the ID.'
            }
          }
        },
        reserved: {
          type: 'string',
          format: 'date-time',
          description: 'The time the ID was reserved.'
        }
      }
    },
    arrayOfCveIds: {
      type: 'array',
      items: {
        $ref: '#/definitions/cveId'
      }
    },
    arrayOfCveIdsNoTime: {
      type: 'array',
      items: {
        $ref: '#/definitions/cveIdNoTime'
      }
    },
    arrayOfOrgs: {
      type: 'array',
      items: {
        $ref: '#/definitions/org'
      }
    },
    arrayOfOrgsNotTime: {
      type: 'array',
      items: {
        $ref: '#/definitions/orgNoTime'
      }
    },
    arrayOfUsersNoSecret: {
      type: 'array',
      items: {
        $ref: '#/definitions/userNoSecret'
      }
    },
    cveIdGetFiltered200: {
      type: 'object',
      properties: {
        totalCount: {
          type: 'integer',
          format: 'int32',
          description: 'Total CVE records found'
        },
        itemsPerPage: {
          type: 'integer',
          format: 'int32',
          description: 'Number of CVE records in a page'
        },
        pageCount: {
          type: 'integer',
          format: 'int32',
          description: 'Total number of pages'
        },
        currentPage: {
          type: 'integer',
          format: 'int32',
          description: 'Current page'
        },
        prevPage: {
          type: 'integer',
          format: 'int32',
          description: 'Previous page'
        },
        nextPage: {
          type: 'integer',
          format: 'int32',
          description: 'Next page'
        },
        cve_ids: {
          $ref: '#/definitions/arrayOfCveIds'
        }
      }
    },
    errorBadInput: {
      type: 'object',
      properties: {
        error: {
          type: 'string',
          description: 'Error name'
        },
        message: {
          type: 'string',
          description: 'Error description'
        },
        details: {
          type: 'array',
          properties: {
            msg: {
              type: 'string',
              description: 'Invalid value'
            },
            param: {
              type: 'string',
              description: 'The name of the parameter with the error'
            },
            location: {
              type: 'string',
              enum: [
                'body',
                'param',
                'query'
              ],
              description: 'The location of the parameter'
            }
          }
        }
      }
    },
    errorCveIds: {
      type: 'object',
      properties: {
        error: {
          type: 'string',
          description: 'Error name'
        },
        message: {
          type: 'string',
          description: 'Error description'
        },
        details: {
          type: 'object',
          properties: {
            amount_reserved: {
              type: 'integer',
              format: 'int32',
              description: 'The amount of IDs that were reserved in the system.'
            }
          }
        },
        cve_ids: {
          type: 'array',
          items: {
            $ref: '#/definitions/cveIdNoTime'
          }
        }
      }
    },
    errorGeneric: {
      type: 'object',
      properties: {
        error: {
          type: 'string',
          description: 'Error name'
        },
        message: {
          error: {
            type: 'string',
            description: 'Error description'
          }
        }
      }
    },
    idQuota200: {
      type: 'object',
      properties: {
        id_quota: {
          type: 'integer',
          format: 'int32',
          description: 'The number of CVE IDs the organization is allowed to have in the RESERVED state at one time.'
        },
        total_reserved: {
          type: 'integer',
          format: 'int32',
          description: 'The total number of CVE IDs across all years that the organization has in the RESERVED state.'
        },
        available: {
          type: 'integer',
          format: 'int32',
          description: 'The number of CVE IDs that can be reserved by the organization. (e.g., id_quota - total_reserved)'
        }
      }
    },
    org: {
      type: 'object',
      properties: {
        name: {
          type: 'string',
          description: 'The name of the organization.'
        },
        short_name: {
          type: 'string',
          description: 'The short name of the organization.'
        },
        UUID: {
          type: 'string',
          description: 'The identifier of the organization.'
        },
        policies: {
          type: 'object',
          properties: {
            id_quota: {
              type: 'integer',
              format: 'int32',
              description: 'The number of CVE IDs the organization is allowed to have in the RESERVED state at one time.',
              minimum: 0,
              maximum: 100000
            }
          }
        },
        authority: {
          type: 'object',
          properties: {
            active_roles: {
              type: 'array',
              items: {
                type: 'string',
                description: 'The active roles of the organization.',
                enum: [
                  'CNA',
                  'SECRETARIAT',
                  'ROOT_CNA',
                  'ADP'
                ]
              }
            }
          }
        },
        time: {
          type: 'object',
          properties: {
            created: {
              type: 'string',
              format: 'date-time',
              description: 'The time the organization was created.'
            },
            modified: {
              type: 'string',
              format: 'date-time',
              description: 'The last time the organization was modified.'
            }
          }
        }
      }
    },
    orgNoTime: {
      type: 'object',
      properties: {
        name: {
          type: 'string',
          description: 'The name of the organization.'
        },
        short_name: {
          type: 'string',
          description: 'The short name of the organization.'
        },
        UUID: {
          type: 'string',
          description: 'The identifier of the organization.'
        },
        policies: {
          type: 'object',
          properties: {
            id_quota: {
              type: 'integer',
              format: 'int32',
              description: 'The number of CVE IDs the organization is allowed to have in the RESERVED state at one time.'
            }
          }
        },
        authority: {
          type: 'object',
          properties: {
            active_roles: {
              type: 'array',
              items: {
                type: 'string',
                description: 'The active roles of the organization.',
                enum: [
                  'CNA',
                  'SECRETARIAT',
                  'ROOT_CNA',
                  'ADP'
                ]
              }
            }
          }
        }
      }
    },
    orgAll200: {
      type: 'object',
      properties: {
        totalCount: {
          type: 'integer',
          format: 'int32',
          description: 'Total CVE records found'
        },
        itemsPerPage: {
          type: 'integer',
          format: 'int32',
          description: 'Number of CVE records in a page'
        },
        pageCount: {
          type: 'integer',
          format: 'int32',
          description: 'Total number of pages'
        },
        currentPage: {
          type: 'integer',
          format: 'int32',
          description: 'Current page'
        },
        prevPage: {
          type: 'integer',
          format: 'int32',
          description: 'Previous page'
        },
        nextPage: {
          type: 'integer',
          format: 'int32',
          description: 'Next page'
        },
        organizations: {
          $ref: '#/definitions/arrayOfOrgs'
        }
      }
    },
    updateCveId200: {
      type: 'object',
      properties: {
        message: {
          type: 'string',
          description: 'Success description'
        },
        updated: {
          $ref: '#/definitions/cveId'
        }
      }
    },
    updateOrg200: {
      type: 'object',
      properties: {
        message: {
          type: 'string',
          description: 'Success description'
        },
        updated: {
          $ref: '#/definitions/org'
        }
      }
    },
    userNoTimeSecret: {
      type: 'object',
      properties: {
        username: {
          type: 'string',
          description: 'The user name of the user.'
        },
        org_UUID: {
          type: 'string',
          description: 'The identifier of the organization the user belongs to.'
        },
        UUID: {
          type: 'string',
          description: 'The identifier of the user.'
        },
        active: {
          type: 'string',
          description: 'The user is an active user of the organization.'
        },
        name: {
          type: 'object',
          properties: {
            first: {
              type: 'string',
              description: 'The first name of the user.'
            },
            last: {
              type: 'string',
              description: 'The last name of the user.'
            },
            middle: {
              type: 'string',
              description: 'The middle name of the user, if any.'
            },
            suffix: {
              type: 'string',
              description: 'The suffix of the user, if any.'
            }
          }
        },
        authority: {
          type: 'object',
          properties: {
            active_roles: {
              type: 'array',
              items: {
                type: 'string',
                description: 'The active roles of the user.',
                enum: [
                  'ADMIN'
                ]
              }
            }
          }
        }
      }
    },
    updatedUser200: {
      type: 'object',
      properties: {
        message: {
          type: 'string',
          description: 'Success description'
        },
        updated: {
          $ref: '#/definitions/userNoSecret'
        }
      }
    },
    user: {
      type: 'object',
      properties: {
        username: {
          type: 'string',
          description: 'The user name of the user.'
        },
        org_UUID: {
          type: 'string',
          description: 'The identifier of the organization the user belongs to.'
        },
        UUID: {
          type: 'string',
          description: 'The identifier of the user.'
        },
        active: {
          type: 'string',
          description: 'The user is an active user of the organization.'
        },
        name: {
          type: 'object',
          properties: {
            first: {
              type: 'string',
              description: 'The first name of the user.'
            },
            last: {
              type: 'string',
              description: 'The last name of the user.'
            },
            middle: {
              type: 'string',
              description: 'The middle name of the user, if any.'
            },
            suffix: {
              type: 'string',
              description: 'The suffix of the user, if any.'
            }
          }
        },
        secret: {
          type: 'string',
          description: 'The API key of the user.'
        },
        authority: {
          type: 'object',
          properties: {
            active_roles: {
              type: 'array',
              items: {
                type: 'string',
                description: 'The active roles of the user.',
                enum: [
                  'ADMIN'
                ]
              }
            }
          }
        },
        time: {
          type: 'object',
          properties: {
            created: {
              type: 'string',
              format: 'date-time',
              description: 'The time the user was created.'
            },
            modified: {
              type: 'string',
              format: 'date-time',
              description: 'The last time the user was modified.'
            }
          }
        }
      }
    },
    userNoSecret: {
      type: 'object',
      properties: {
        username: {
          type: 'string',
          description: 'The user name of the user.'
        },
        org_UUID: {
          type: 'string',
          description: 'The identifier of the organization the user belongs to.'
        },
        UUID: {
          type: 'string',
          description: 'The identifier of the user.'
        },
        active: {
          type: 'string',
          description: 'The user is an active user of the organization.'
        },
        name: {
          type: 'object',
          properties: {
            first: {
              type: 'string',
              description: 'The first name of the user.'
            },
            last: {
              type: 'string',
              description: 'The last name of the user.'
            },
            middle: {
              type: 'string',
              description: 'The middle name of the user, if any.'
            },
            suffix: {
              type: 'string',
              description: 'The suffix of the user, if any.'
            }
          }
        },
        authority: {
          type: 'object',
          properties: {
            active_roles: {
              type: 'array',
              items: {
                type: 'string',
                description: 'The active roles of the user.',
                enum: [
                  'ADMIN'
                ]
              }
            }
          }
        },
        time: {
          type: 'object',
          properties: {
            created: {
              type: 'string',
              format: 'date-time',
              description: 'The time the user was created.'
            },
            modified: {
              type: 'string',
              format: 'date-time',
              description: 'The last time the user was modified.'
            }
          }
        }
      }
    },
    userOrgAll200: {
      type: 'object',
      properties: {
        totalCount: {
          type: 'integer',
          format: 'int32'
        },
        itemsPerPage: {
          type: 'integer',
          format: 'int32'
        },
        pageCount: {
          type: 'integer',
          format: 'int32'
        },
        currentPage: {
          type: 'integer',
          format: 'int32'
        },
        prevPage: {
          type: 'integer',
          format: 'int32'
        },
        nextPage: {
          type: 'integer',
          format: 'int32'
        },
        users: {
          $ref: '#/defintions/arrayOfUsersNoSecret'
        }
      }
    }
  }
}

swaggerAutogen(outputFile, endpointsFiles, doc)
