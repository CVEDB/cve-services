const swaggerAutogen = require('swagger-autogen')({ openapi: '3.0.2' })
const outputFile = 'docs/swagger.json'
const endpointsFiles = [
  'src/controller/cve-id.controller/index.js',
  'src/controller/cve.controller/index.js',
  'src/controller/org.controller/index.js',
  'src/controller/user.controller/index.js'
]

const doc = {
  info: {
    version: '3.0.2',
    title: 'CVE Services API',
    description: 'The CVE services API which supports automation tooling for the CVE Project.'
  },
  components: {
    examples: {
      cveIdGetFiltered200: {
        value: {
          totalCount: 0,
          itemsPerPage: 0,
          pageCount: 0,
          currentPage: 0,
          prevPage: 0,
          nextPage: 0,
          cve_ids: [
            {
              cve_id: "CVE-1999-0001",
              cve_year: "1999",
              owning_cna: "string",
              state: "RESERVED",
              requested_by: {
                cna: "string",
                user: "string"
              }
            }
          ]
        }
      },
      errorBadInput: {
        value: {
          error: 'string',
          message: 'string',
          details: [
            {
              msg: 'string',
              param: 'string',
              location: 'string'
            }
          ]
        }
      },
      errorGeneric: {
        value: {
          error: 'string',
          message: 'string'
        }
      }
    },
    parameters: {
      apiEntityHeader: {
        in: 'header',
        name: 'CVE-API-ORG',
        description: 'The shortname for the entity (e.g., CNA, ADP) that is authenticated or requesting authentication.',
        required: true,
        schema: {
          type: 'string'
        }
      },
      apiUserHeader: {
        in: 'header',
        name: 'CVE-API-USER',
        description: 'The username for the account that is making the request.',
        required: true,
        schema: {
          type: 'string'
        }
      },
      apiSecretHeader: {
        in: 'header',
        name: 'CVE-API-KEY',
        description: 'The user\'s API key.',
        required: true,
        schema: {
          type: 'string'
        }
      },
      cveIdGetFilteredState: {
        in: 'query',
        name: 'state',
        description: 'Filter by CVE state [RESERVED, PUBLISHED, REJECTED].',
        required: false,
        schema: {
          type: 'string'
        }
      },
      cveIdGetFilteredCveIdYear: {
        in: 'query',
        name: 'cve_id_year',
        description: 'Filter by the year in the CVE ID (YYYY).',
        required: false,
        scheama: {
          type: 'integer',
          format: 'int32'
        }
      },
      cveIdGetFilteredTimeReservedLt: {
        in: 'query',
        name: 'time_reserved.lt',
        description: 'Get all CVE-ID records reserved before timestamp.',
        required: false,
        schema: {
          type: 'string',
          format: 'date-time'
        }
      },
      cveIdGetFilteredTimeReservedGt: {
        in: 'query',
        name: 'time_reserved.gt',
        description: 'Get all CVE-ID records reserved after timestamp.',
        required: false,
        schema: {
          type: 'string',
          format: 'date-time'
        }
      },
      cveIdGetFilteredTimeModifiedLt: {
        in: 'query',
        name: 'time_modified.lt',
        description: 'Get all CVE-ID records modified before timestamp.',
        required: false,
        schema: {
          type: 'string',
          format: 'date-time'
        }
      },
      cveIdGetFilteredTimeModifiedGt: {
        in: 'query',
        name: 'time_modified.gt',
        description: 'Get all CVE-ID records modified after timestamp.',
        required: false,
        schema: {
          type: 'string',
          format: 'date-time'
        }
      },
      pageQuery: {
        in: 'query',
        name: 'page',
        description: 'The current page in the paginator.',
        required: false,
        schema: {
          type: 'integer',
          format: 'int32',
          minimum: 1
        }
      }
    }
  },
  definitions: {
    cveId: {
      type: 'object',
      properties: {
        cve_id: {
          type: 'string',
          pattern: '^CVE-[0-9]{4}-[0-9]{4,}$'
        },
        cve_year: {
          type: 'string',
          pattern: '^[0-9]{4}$'
        },
        owning_cna: {
          type: 'string',
          description: 'The shortname for the organization that owns the CVE-ID.'
        },
        state: {
          type: 'string',
          enum: [
            'RESERVED',
            'PUBLISHED',
            'REJECTED'
          ]
        },
        requested_by: {
          type: 'object',
          properties: {
            cna: {
              type: 'string',
              description: 'The shortname for the organization of the user that requested the ID.'
            },
            user: {
              type: 'string',
              description: 'The username for the account that requested the ID.'
            }
          }
        },
        reserved: {
          type: 'string',
          format: 'date-time',
          description: 'The time the ID was reserved.'
        },
        time: {
          type: 'object',
          properties: {
            created: {
              type: 'string',
              format: 'date-time',
              description: 'The time the ID was created.'
            },
            modified: {
              type: 'string',
              format: 'date-time',
              description: 'The last time the ID was modified.'
            }
          }
        }
      }
    },
    arrayOfCveIds: {
      type: 'array',
      items: {
        $ref: '#/definitions/cveId'
      }
    },
    cveIdGetFiltered200: {
      type: 'object',
      properties: {
        totalCount: {
          type: 'integer',
          format: 'int32',
          description: 'Total CVE records found'
        },
        itemsPerPage: {
          type: 'integer',
          format: 'int32',
          description: 'Number of CVE records in a page'
        },
        pageCount: {
          type: 'integer',
          format: 'int32',
          description: 'Total number of pages'
        },
        currentPage: {
          type: 'integer',
          format: 'int32',
          description: 'Current page'
        },
        prevPage: {
          type: 'integer',
          format: 'int32',
          description: 'Previous page'
        },
        nextPage: {
          type: 'integer',
          format: 'int32',
          description: 'Next page'
        },
        cve_ids: {
          $ref: '#/definitions/arrayOfCveIds'
        }
      }
    },
    errorBadInput: {
      type: 'object',
      properties: {
        error: {
          type: 'string',
          description: 'Error name'
        },
        message: {
          type: 'string',
          description: 'Error description'
        },
        details: {
          type: 'array',
          properties: {
            msg: {
              type: 'string',
              description: 'Invalid value'
            },
            param: {
              type: 'string',
              description: 'The name of the parameter with the error'
            },
            location: {
              type: 'string',
              enum: [
                'body',
                'param',
                'query'
              ],
              description: 'The location of the parameter'
            }
          }
        }
      }
    },
    errorGeneric: {
      type: 'object',
      properties: {
        error: {
          type: 'string',
          description: 'Error name'
        },
        message: {
          error: {
            type: 'string',
            description: 'Error description'
          }
        }
      }
    }
  }
}

swaggerAutogen(outputFile, endpointsFiles, doc)
