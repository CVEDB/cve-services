const express = require('express')
const router = express.Router()
const mw = require('../../middleware/middleware')
const controller = require('./user.controller')
const { parseGetParams, parseError } = require('./user.middleware')

router.get('/users',
  /*
  #swagger.tags = ['Users']
  #swagger.operationId = 'userAll'
  #swagger.summary = "Retrieve all users"
  #swagger.description = "
        <h2>Access Control</h2>
        <p> Only secretariat users can accesss the endpoint</p>
        <h2>Expected Behavior</h2>
        <p><b>Secretariat:</b> Can see the information of all users of any Organization</p>"
  #swagger.parameters['$ref'] = [
    '#/components/parameters/pageQuery',
    '#/components/parameters/apiEntityHeader',
    '#/components/parameters/apiUserHeader',
    '#/components/parameters/apiSecretHeader'
  ]
  #swagger.responses[200] = {
    description: 'Returns all users.',
    content:{
      "application/json":{
        schema: { $ref: '/schemas/user/list-users-response.json' }
      }
    }
  }
  #swagger.responses[400] = {
    description: 'Bad Request',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/bad-request.json' }
      }
    }
  }
  #swagger.responses[401] = {
    description: 'Not Authenticated',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/generic.json' },
        examples:{ errorGeneric: { $ref: '#/components/examples/errorGeneric' }}
      }
    }
  }
  #swagger.responses[403] = {
    description: 'Forbidden',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/generic.json' }
      }
    }
  }
  #swagger.responses[404] = {
    description: 'Not Found',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/generic.json' }
      }
    }
  }
  #swagger.responses[500] = {
    description: 'Internal Server Error',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/generic.json' }
      }
    }
  }
  */
  mw.onlySecretariat,
  mw.validateUser,
  parseError,
  parseGetParams,
  controller.ALL_USERS)

module.exports = router
