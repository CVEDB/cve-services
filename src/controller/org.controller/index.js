const express = require('express')
const router = express.Router()
const mw = require('../../middleware/middleware')
const controller = require('./org.controller')
const { body, param, query } = require('express-validator')
const { parseGetParams, parsePostParams, parseError, isOrgRole, isUserRole } = require('./org.middleware')
const CONSTANTS = require('../../../src/constants')

router.get('/org',
  /*
  #swagger.tags = ['Organization']
  #swagger.operationId = 'orgAll'
  #swagger.summary = "Retrieves all organization records"
  #swagger.description = "
        <h2>Access Control</h2>
        <p>At least one of the following roles are needed to access the endpoint:</p>
        <p>- <b>SECRETARIAT:</b> The user must belong to an Organization with the “SECRETARIAT” role</p>
        <h2>Expected Behavior</h2>
        <p><b>Secretariat:</b> Can see the information of all Organizations</p>"
  #swagger.parameters['$ref'] = [
    '#/components/parameters/pageQuery',
    '#/components/parameters/apiEntityHeader',
    '#/components/parameters/apiUserHeader',
    '#/components/parameters/apiSecretHeader'
  ]
  #swagger.responses[200] = {
    description: 'Returns all organization records.',
    content: { 
      "application/json": { 
        schema: { $ref: '#/definitions/orgAll200' },
        examples: { orgAll200: { $ref: '#/components/examples/orgAll200' }}
      }
    }
  }
  #swagger.responses[400] = {
    description: 'Bad Request',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorBadInput' },
        examples: { errorBadInput: { $ref: '#/components/examples/errorBadInput' }}
      }
    }
  }
  #swagger.responses[401] = {
    description: 'Not Authenticated',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[403] = {
    description: 'Forbidden',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[404] = {
    description: 'Not Found',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[500] = {
    description: 'Internal Server Error',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/internalServerError' }}   
      }
    }
  }      
  */
  mw.onlySecretariat,
  mw.validateUser,
  query(['page']).optional().isInt({ min: CONSTANTS.PAGINATOR_PAGE }),
  parseError,
  parseGetParams,
  controller.ORG_ALL)
router.post('/org',
  /*
  #swagger.tags = ['Organization']
  #swagger.operationId = 'orgCreateSingle'
  #swagger.summary = "Creates an organization record"
  #swagger.description = "
        <h2>Access Control</h2>
        <p>At least one of the following roles are needed to access the endpoint:</p>
        <p>- <b>SECRETARIAT:</b> The user must belong to an Organization with the “SECRETARIAT” role</p>
        <h2>Expected Behavior</h2>
        <p><b>Secretariat:</b> Can create any Organization record</p>
  "
  #swagger.parameters['$ref'] = [
    '#/components/parameters/apiEntityHeader',
    '#/components/parameters/apiUserHeader',
    '#/components/parameters/apiSecretHeader'
  ]
  #swagger.requestBody = {
    required: true,
    content: {
      'application/json': {
        schema: { $ref: '#/definitions/createOrgRequestBody' },
        examples: { createOrgRequestBody: { $ref: '#/components/examples/createOrgRequestBody' }}
      }
    }
  }
  #swagger.responses[200] = {
    description: 'Returns the organization record created.',
    content: { 
      "application/json": { 
        schema: { $ref: '#/definitions/createOrg200' },
        examples: { createOrg200: { $ref: '#/components/examples/createOrg200' }}
      }
    }
  }
  #swagger.responses[400] = {
    description: 'Bad Request',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorBadInput' },
        examples: { errorBadInput: { $ref: '#/components/examples/errorBadInput' }}
      }
    }
  }
  #swagger.responses[401] = {
    description: 'Not Authenticated',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[403] = {
    description: 'Forbidden',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[404] = {
    description: 'Not Found',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[500] = {
    description: 'Internal Server Error',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/internalServerError' }}   
      }
    }
  }      
  */
  mw.onlySecretariat,
  mw.validateUser,
  body(['short_name']).isString().trim().escape().notEmpty(),
  body(['name']).isString().trim().escape().notEmpty(),
  body(['uuid']).optional().isString().trim().escape(),
  body(['authority.active_roles']).optional().customSanitizer(val => { return val.map(x => { return x.toUpperCase() }) }).custom(val => { return isOrgRole(val) }),
  body(['policies.id_quota']).optional().not().isArray().isInt({ min: CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_min, max: CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_max }).withMessage('The id_quota does not comply with CVE id quota limitations.'),
  parseError,
  parsePostParams,
  controller.ORG_CREATE_SINGLE)
router.get('/org/:identifier',
  /*
  #swagger.tags = ['Organization']
  #swagger.operationId = 'orgSingle'
  #swagger.summary = "Retrieve an organization's data given the identifier, which can be their short name or the organization's uuid."
  #swagger.description = "
        <h2>Access Control</h2>
        <p>No roles needed to access the endpoint</p>
        <h2>Expected Behavior</h2>
        <p><b>Secretariat:</b> Can see the information of any Organization</p>
        <p><b>Admin User:</b> Can only see the information of the Organization it belongs to</p>
        <p><b>Regular User:</b> Can only see the information of the Organization it belongs to</p>
  "
  #swagger.parameters['identifier'] = { description: 'The short name or UUID of the organization' }
  #swagger.parameters['$ref'] = [
    '#/components/parameters/apiEntityHeader',
    '#/components/parameters/apiUserHeader',
    '#/components/parameters/apiSecretHeader'
  ]
  #swagger.responses[200] = {
    description: 'Returns the organization record.',
    content: { 
      "application/json": { 
        schema: { $ref: '#/definitions/org' },
        examples: { org: { $ref: '#/components/examples/org200' }}
      }
    }
  }
  #swagger.responses[400] = {
    description: 'Bad Request',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorBadInput' },
        examples: { errorBadInput: { $ref: '#/components/examples/errorBadInput' }}
      }
    }
  }
  #swagger.responses[401] = {
    description: 'Not Authenticated',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[403] = {
    description: 'Forbidden',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[404] = {
    description: 'Not Found',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[500] = {
    description: 'Internal Server Error',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/internalServerError' }}   
      }
    }
  }
  */
  mw.validateUser,
  param(['identifier']).isString().trim().escape(),
  parseError,
  parseGetParams,
  controller.ORG_SINGLE)
router.put('/org/:shortname',
  /*
  #swagger.tags = ['Organization']
  #swagger.operationId = 'orgUpdateSingle'
  #swagger.summary = "Update an organization record"
  #swagger.description = "
        <h2>Access Control</h2>
        <p>At least one of the following roles are needed to access the endpoint:</p>
        <p>- <b>SECRETARIAT:</b> The user must belong to an Organization with the “SECRETARIAT” role to access the endpoint</p>
        <h2>Expected Behavior</h2>
        <p><b>Secretariat:</b> Can update the information of any Organization</p>"
  #swagger.parameters['shortname'] = { description: 'The short name of the organization.' } 
  #swagger.parameters['$ref'] = [
    '#/components/parameters/shortname',
    '#/components/parameters/id_quota',
    '#/components/parameters/name',
    '#/components/parameters/active_roles_add',
    '#/components/parameters/active_roles_remove',
    '#/components/parameters/apiEntityHeader',
    '#/components/parameters/apiUserHeader',
    '#/components/parameters/apiSecretHeader'
  ]
  #swagger.responses[200] = {
    description: 'Returns the organization record updated.',
    content: { 
      "application/json": { 
        schema: { $ref: '#/definitions/updateOrg200' },
        examples: { updateOrg200: { $ref: '#/components/examples/updateOrg200' }}
      }
    }
  }
  #swagger.responses[400] = {
    description: 'Bad Request',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorBadInput' },
        examples: { errorBadInput: { $ref: '#/components/examples/errorBadInput' }}
      }
    }
  }
  #swagger.responses[401] = {
    description: 'Not Authenticated',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[403] = {
    description: 'Forbidden',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[404] = {
    description: 'Not Found',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[500] = {
    description: 'Internal Server Error',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/internalServerError' }}   
      }
    }
  }
  */
  mw.onlySecretariat,
  mw.validateUser,
  param(['shortname']).isString().trim().escape(),
  query(['shortname']).optional().isString().trim().escape().notEmpty(),
  query(['id_quota']).optional().not().isArray().isInt({ min: CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_min, max: CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_max }).withMessage('The id_quota does not comply with CVE id quota limitations.'),
  query(['name']).optional().isString().trim().escape().notEmpty(),
  query(['active_roles.add']).optional().toArray(),
  query(['active_roles.add']).optional().customSanitizer(val => { return val.map(x => { return x.toUpperCase() }) }).custom(val => { return isOrgRole(val) }),
  query(['active_roles.remove']).optional().toArray(),
  query(['active_roles.remove']).optional().customSanitizer(val => { return val.map(x => { return x.toUpperCase() }) }).custom(val => { return isOrgRole(val) }),
  parseError,
  parsePostParams,
  controller.ORG_UPDATE_SINGLE)
router.get('/org/:shortname/users',
  /*
  #swagger.tags = ['Users']
  #swagger.operationId = 'userOrgAll'
  #swagger.summary = "Retrieve all user records specified by the short name of the organization"
  #swagger.description = "
        <h2>Access Control</h2>
        <p>No roles needed to access the endpoint</p>
        <h2>Expected Behavior</h2>
        <p><b>Secretariat:</b> Can see the information of all users of any Organization</p>
        <p><b>Admin User:</b> Can only see the information of users that belongs to the same Organization</p>
        <p><b>Regular User:</b> Can only see the information of users that belongs to the same Organization</p>"
  #swagger.parameters['shortname'] = { description: 'The short name of the organization.' }
  #swagger.parameters['$ref'] = [
    '#/components/parameters/pageQuery',
    '#/components/parameters/apiEntityHeader',
    '#/components/parameters/apiUserHeader',
    '#/components/parameters/apiSecretHeader'
  ]
  #swagger.responses[200] = {
    description: 'Returns all user records for the organization.',
    content: { 
      "application/json": { 
        schema: { $ref: '#/definitions/userOrgAll200' },
        examples: { userOrgAll200: { $ref: '#/components/examples/userOrgAll200' }}
      }
    }
  }
  #swagger.responses[400] = {
    description: 'Bad Request',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorBadInput' },
        examples: { errorBadInput: { $ref: '#/components/examples/errorBadInput' }}
      }
    }
  }
  #swagger.responses[401] = {
    description: 'Not Authenticated',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[403] = {
    description: 'Forbidden',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[404] = {
    description: 'Not Found',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[500] = {
    description: 'Internal Server Error',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/internalServerError' }}   
      }
    }
  }
  */
  mw.validateUser,
  param(['shortname']).isString().trim().escape().notEmpty(),
  parseError,
  parseGetParams,
  controller.USER_ALL)
router.post('/org/:shortname/user',
  /*
  #swagger.tags = ['Users']
  #swagger.operationId = 'userCreateSingle'
  #swagger.summary = "Create a user record with the provided short name as the owning organization"
  #swagger.description = "
        <h2>Access Control</h2>
        <p>At least one of the following roles are needed to access the endpoint:</p>
        <p>- <b>SECRETARIAT:</b> The user must belong to an Organization with the “SECRETARIAT” role</p>
        <p>- <b>ADMIN:</b> The user must have the “ADMIN” role and must belong to the same Organization as the new user</p>
        <h2>Expected Behavior</h2>
        <p><b>Secretariat:</b> Can create a user record for any Organization</p>
        <p><b>Admin User:</b> Can only create a user record for users that belongs to the same Organization</p>"
  #swagger.parameters['shortname'] = { description: 'The short name of the organization.' }
  #swagger.parameters['$ref'] = [
    '#/components/parameters/pageQuery',
    '#/components/parameters/apiEntityHeader',
    '#/components/parameters/apiUserHeader',
    '#/components/parameters/apiSecretHeader'
  ]
  #swagger.requestBody = {
    required: true,
    content: {
      'application/json': {
        schema: { $ref: '#/definitions/createUserRequestBody' },
        examples: { createUserRequestBody: { $ref: '#/components/examples/createUserRequestBody' }}
      }
    }
  }
  #swagger.responses[200] = {
    description: 'Returns the created user record (with the secret).',
    content: { 
      "application/json": { 
        schema: { $ref: '#/definitions/createUser200' },
        examples: { createUser200: { $ref: '#/components/examples/createUser200' }}
      }
    }
  }
  #swagger.responses[400] = {
    description: 'Bad Request',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorBadInput' },
        examples: { errorBadInput: { $ref: '#/components/examples/errorBadInput' }}
      }
    }
  }
  #swagger.responses[401] = {
    description: 'Not Authenticated',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[403] = {
    description: 'Forbidden',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[404] = {
    description: 'Not Found',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[500] = {
    description: 'Internal Server Error',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/internalServerError' }}   
      }
    }
  }
  */
  mw.onlySecretariatOrAdmin,
  mw.validateUser,
  param(['shortname']).isString().trim().escape().notEmpty(),
  body(['username']).isString().trim().escape().notEmpty(),
  body(['org_uuid']).optional().isString().trim().escape(),
  body(['uuid']).optional().isString().trim().escape(),
  body(['name.first']).optional().isString().trim().escape(),
  body(['name.last']).optional().isString().trim().escape(),
  body(['name.middle']).optional().isString().trim().escape(),
  body(['name.suffix']).optional().isString().trim().escape(),
  body(['authority.active_roles']).optional().customSanitizer(val => { return val.map(x => { return x.toUpperCase() }) }).custom(val => { return isUserRole(val) }),
  parseError,
  parsePostParams,
  controller.USER_CREATE_SINGLE)
router.get('/org/:shortname/user/:username',
  /*
  #swagger.tags = ['Users']
  #swagger.operationId = 'userSingle'
  #swagger.summary = "Retrieve a user record"
  #swagger.description = "
        <h2>Access Control</h2>
        <p>No roles needed to access the endpoint</p>
        <h2>Expected Behavior</h2>
        <p><b>Secretariat:</b> Can see the information of a user of any Organization</p>
        <p><b>Admin User:</b> Can only see the information of a user that belongs to the same Organization</p>
        <p><b>Regular User:</b> Can only see the information of a user that belongs to the same Organization</p>"
  #swagger.parameters['shortname'] = { description: 'The short name of the organization.' }
  #swagger.parameters['username'] = { description: 'The user name of the user.' }
  #swagger.parameters['$ref'] = [
    '#/components/parameters/apiEntityHeader',
    '#/components/parameters/apiUserHeader',
    '#/components/parameters/apiSecretHeader'
  ]
  #swagger.responses[200] = {
    description: 'Returns user record details.',
    content: { 
      "application/json": { 
        schema: { $ref: '#/definitions/userNoSecret' },
        examples: { userNoSecret: { $ref: '#/components/examples/userNoSecret' }}
      }
    }
  }
  #swagger.responses[400] = {
    description: 'Bad Request',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorBadInput' },
        examples: { errorBadInput: { $ref: '#/components/examples/errorBadInput' }}
      }
    }
  }
  #swagger.responses[401] = {
    description: 'Not Authenticated',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[403] = {
    description: 'Forbidden',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[404] = {
    description: 'Not Found',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[500] = {
    description: 'Internal Server Error',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/internalServerError' }}   
      }
    }
  }
  */
  mw.validateUser,
  param(['shortname']).isString().trim().escape().notEmpty(),
  param(['username']).isString().trim().escape().notEmpty(),
  parseError,
  parseGetParams,
  controller.USER_SINGLE)
router.put('/org/:shortname/user/:username',
  /*
  #swagger.tags = ['Users']
   #swagger.operationId = 'userUpdateSingle'
  #swagger.summary = "Retrieve a user record"
  #swagger.description = "
        <h2>Access Control</h2>
        <p>No roles needed to access the endpoint</p>
        <h2>Expected Behavior</h2>
        <p><b>Secretariat:</b> Can update a user record for any Organization</p>
        <p><b>Admin User:</b> Can only update a user record for users that belongs to the same Organization</p>
        <p><b>Regular User:</b> Can only update its own user record</p>"
  #swagger.parameters['shortname'] = { description: 'The short name of the organization.' }
  #swagger.parameters['username'] = { description: 'The user name of the user.' }
  #swagger.parameters['$ref'] = [
    '#/components/parameters/active',
    '#/components/parameters/activeUserRolesAdd',
    '#/components/parameters/activeUserRolesRemove',
    '#/components/parameters/nameFirst',
    '#/components/parameters/nameLast',
    '#/components/parameters/nameMiddle',
    '#/components/parameters/nameSuffix',
    '#/components/parameters/newUsername',
    '#/components/parameters/orgShortname',
    '#/components/parameters/apiEntityHeader',
    '#/components/parameters/apiUserHeader',
    '#/components/parameters/apiSecretHeader'
  ]
  #swagger.responses[200] = {
    description: 'Returns the updated user record.',
    content: { 
      "application/json": { 
        schema: { $ref: '#/definitions/updatedUser200' },
        examples: { updatedUser200: { $ref: '#/components/examples/updatedUser200' }}
      }
    }
  }
  #swagger.responses[400] = {
    description: 'Bad Request',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorBadInput' },
        examples: { errorBadInput: { $ref: '#/components/examples/errorBadInput' }}
      }
    }
  }
  #swagger.responses[401] = {
    description: 'Not Authenticated',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[403] = {
    description: 'Forbidden',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[404] = {
    description: 'Not Found',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[500] = {
    description: 'Internal Server Error',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/internalServerError' }}   
      }
    }
  }
  */
  mw.validateUser,
  param(['shortname']).isString().trim().escape().notEmpty(),
  param(['username']).isString().trim().escape().notEmpty(),
  query(['active']).optional().isString().trim().escape().isIn(['true', 'false']),
  query(['new_username']).optional().isString().trim().escape().notEmpty(),
  query(['org_shortname']).optional().isString().trim().escape().notEmpty(),
  query(['name.first']).optional().isString().trim().escape(),
  query(['name.last']).optional().isString().trim().escape(),
  query(['name.middle']).optional().isString().trim().escape(),
  query(['name.suffix']).optional().isString().trim().escape(),
  query(['active_roles.add']).optional().toArray(),
  query(['active_roles.add']).optional().customSanitizer(val => { return val.map(x => { return x.toUpperCase() }) }).custom(val => { return isUserRole(val) }),
  query(['active_roles.remove']).optional().toArray(),
  query(['active_roles.remove']).optional().customSanitizer(val => { return val.map(x => { return x.toUpperCase() }) }).custom(val => { return isUserRole(val) }),
  parseError,
  parsePostParams,
  controller.USER_UPDATE_SINGLE)
router.put('/org/:shortname/user/:username/reset_secret',
  /*
  #swagger.tags = ['Users']
  #swagger.operationId = 'userResetSecret'
  #swagger.summary = "Reset the API key of the user"
  #swagger.description = "
        <h2>Access Control</h2>
        <p>No roles needed to access the endpoint</p>
        <h2>Expected Behavior</h2>
        <p><b>Secretariat:</b> Can reset the API secret of any user</p>
        <p><b>Admin User:</b> Can only reset the API secret of users that belong to the same Organization</p>
        <p><b>Regular User:</b> Can only reset its own API secret</p>"
  #swagger.parameters['shortname'] = { description: 'The short name of the organization.' }
  #swagger.parameters['username'] = { description: 'The user name of the user.' }
  #swagger.parameters['$ref'] = [
    '#/components/parameters/apiEntityHeader',
    '#/components/parameters/apiUserHeader',
    '#/components/parameters/apiSecretHeader'
  ]
  #swagger.responses[200] = {
    description: 'Returns the new API key.',
    content: { 
      "application/json": { 
        schema: { $ref: '#/definitions/apiSecret' },
        examples: { apiSecret: { $ref: '#/components/examples/apiSecret' }}
      }
    }
  }
  #swagger.responses[400] = {
    description: 'Bad Request',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorBadInput' },
        examples: { errorBadInput: { $ref: '#/components/examples/errorBadInput' }}
      }
    }
  }
  #swagger.responses[401] = {
    description: 'Not Authenticated',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[403] = {
    description: 'Forbidden',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[404] = {
    description: 'Not Found',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[500] = {
    description: 'Internal Server Error',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/internalServerError' }}   
      }
    }
  }
  */
  mw.validateUser,
  param(['shortname']).isString().trim().escape().notEmpty(),
  param(['username']).isString().trim().escape().notEmpty(),
  parseError,
  parsePostParams,
  controller.USER_RESET_SECRET)
router.get('/org/:shortname/id_quota',
  /*
  #swagger.tags = ['Organization']
  #swagger.operationId = 'orgIdQuota'
  #swagger.summary = "Retrieves the details about the CVE ID quota information of an organization"
  #swagger.description = "
        <h2>Access Control</h2>
        <p>No roles needed to access the endpoint</p>
        <h2>Expected Behavior</h2>
        <p><b>Secretariat:</b> Can see the CVE ID quota information of any Organization</p>
        <p><b>Admin User:</b> Can only see the CVE ID quota information of the Organization it belongs to</p>
        <p><b>Regular User:</b> Can only see the CVE ID quota information of the Organization it belongs to</p>""
  #swagger.parameters['shortname'] = { description: 'The short name of the organization.' }
  #swagger.parameters['$ref'] = [
    '#/components/parameters/apiEntityHeader',
    '#/components/parameters/apiUserHeader',
    '#/components/parameters/apiSecretHeader'
  ]
  #swagger.responses[200] = {
    description: 'Returns CVE ID quota details of an organization.',
    content: { 
      "application/json": { 
        schema: { $ref: '#/definitions/idQuota200' },
        examples: { idQuota200: { $ref: '#/components/examples/idQuota200' }}
      }
    }
  }
  #swagger.responses[400] = {
    description: 'Bad Request',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorBadInput' },
        examples: { errorBadInput: { $ref: '#/components/examples/errorBadInput' }}
      }
    }
  }
  #swagger.responses[401] = {
    description: 'Not Authenticated',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[403] = {
    description: 'Forbidden',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[404] = {
    description: 'Not Found',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}   
      }
    }
  }
  #swagger.responses[500] = {
    description: 'Internal Server Error',
    content: {
      "application/json": {
        schema: { $ref: '#/definitions/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/internalServerError' }}   
      }
    }
  }
  */
  mw.validateUser,
  param(['shortname']).isString().trim().escape().notEmpty(),
  parseError,
  parseGetParams,
  controller.ORG_ID_QUOTA)

module.exports = router
