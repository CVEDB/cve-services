const express = require('express')
const router = express.Router()
const mw = require('../../middleware/middleware')
const controller = require('./cve.controller')
const { body, param, query } = require('express-validator')
const { parseGetParams, parsePostParams, parseError, toDate, validateRejectBody, onlyOneEnglishDescription } = require('./cve.middleware')
const CONSTANTS = require('../../constants')
const CHOICES = [CONSTANTS.CVE_STATES.REJECTED, CONSTANTS.CVE_STATES.PUBLISHED]

router.get('/cve/:id',
  param(['id']).isString().matches(/^CVE-[0-9]{4}-[0-9]{4,}$/i),
  parseError,
  parseGetParams,
  controller.CVE_GET_SINGLE)

router.get('/cve',
  query(['page']).optional().isInt({ min: CONSTANTS.PAGINATOR_PAGE }),
  query(['time_modified.lt']).optional().isString().trim().escape().customSanitizer(val => { return toDate(val) }).not().isEmpty(),
  query(['time_modified.gt']).optional().isString().trim().escape().customSanitizer(val => { return toDate(val) }).not().isEmpty(),
  query(['state']).optional().isString().trim().escape().customSanitizer(val => { return val.toUpperCase() }).isIn(CHOICES),
  query(['count_only']).optional().isBoolean(),
  query(['assignerShortName']).optional().isString().trim().escape().notEmpty(),
  query(['assigner']).optional().isString().trim().escape().notEmpty(),
  parseError,
  parseGetParams,
  controller.CVE_GET_FILTERED)

router.post('/cve/:id',
  mw.onlyCnas,
  mw.validateUser,
  mw.validateCveJsonSchema,
  param(['id']).isString().matches(/^CVE-[0-9]{4}-[0-9]{4,}$/i),
  parseError,
  parsePostParams,
  controller.CVE_SUBMIT)

router.put('/cve/:id',
  mw.onlyCnas,
  mw.validateUser,
  mw.validateCveJsonSchema,
  param(['id']).isString().matches(/^CVE-[0-9]{4}-[0-9]{4,}$/i),
  parseError,
  parsePostParams,
  controller.CVE_UPDATE_SINGLE)

router.post('/cve/:id/reject',
  mw.onlyCnas,
  mw.validateUser,
  validateRejectBody,
  param(['id']).isString().matches(/^CVE-[0-9]{4}-[0-9]{4,}$/i),
  body(['descriptions']).isArray().trim().escape().customSanitizer(arr => { return onlyOneEnglishDescription(arr) }).notEmpty(),
  body(['replacedBy']).optional().isArray().trim().escape().notEmpty(),
  parseError,
  parsePostParams,
  controller.CVE_REJECT_RECORD)

module.exports = router
