const express = require('express')
const router = express.Router()
const mw = require('../../middleware/middleware')
const controller = require('./cve.controller')
const { body, param, query } = require('express-validator')
const { parseGetParams, parsePostParams, parseError, toDate, validateCveCnaContainerJsonSchema, validateRejectBody, onlyOneEnglishDescription } = require('./cve.middleware')
const CONSTANTS = require('../../constants')
const CHOICES = [CONSTANTS.CVE_STATES.REJECTED, CONSTANTS.CVE_STATES.PUBLISHED]

router.get('/cve/:id',
  /*
  #swagger.tags = ['CVE Record']
  #swagger.operationId = 'cveGetSingle'
  #swagger.summary = "Returns a CVE record by CVE ID (This endpoint can only be used by the Secretariat.)"
  #swagger.description = "
        <h2>Access Control</h2>
        <p>At least one of the following roles are needed to access the endpoint:</p>
        <p>- <b>SECRETARIAT:</b> The user must belong to an Organization with the “SECRETARIAT” role</p>
        <h2>Expected Behavior</h2>
        <p><b>Secretariat:</b> Can see a CVE record owned by any Organization</p>"
  #swagger.parameters['id'] = { description: 'The CVE ID for the record to be retrieved.' }
  #swagger.parameters['$ref'] = [
    '#/components/parameters/apiEntityHeader',
    '#/components/parameters/apiUserHeader',
    '#/components/parameters/apiSecretHeader'
  ]
  #swagger.responses[200] = {
    description: 'The requested CVE record is returned.',
    content: {
      "application/json": {
        schema: {
          anyOf: [
            {
              $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_public.schema'
            },
            {
              $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_reject.schema'
            }
          ]
        }
      }
    }
  }
  #swagger.responses[400] = {
    description: 'Bad Request',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorBadInput' },
        examples: { errorBadInput: { $ref: '#/components/examples/errorBadInput' }}
      }
    }
  }
  #swagger.responses[401] = {
    description: 'Not Authenticated',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}
      }
    }
  }
  #swagger.responses[403] = {
    description: 'Forbidden',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}
      }
    }
  }
  #swagger.responses[404] = {
    description: 'Not Found',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}
      }
    }
  }
  #swagger.responses[500] = {
    description: 'Internal Server Error',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/internalServerError' }}
      }
    }
  }
  */
  param(['id']).isString().matches(/^CVE-[0-9]{4}-[0-9]{4,}$/i),
  parseError,
  parseGetParams,
  controller.CVE_GET_SINGLE)

router.get('/cve',
  /*
  #swagger.tags = ['CVE Record']
  #swagger.operationId = 'cveGetFiltered'
  #swagger.summary = "Retrieves all CVE records (This endpoint can only be used by the Secretariat.)"
  #swagger.description = "
        This endpoint is an internal admin endpoint restricted to the Secretariat.
        <h2>Access Control</h2>
        <p>At least one of the following roles are needed to access the endpoint:</p>
        <p>- <b>SECRETARIAT:</b> The user must belong to an Organization with the “SECRETARIAT” role</p>
        <h2>Expected Behavior</h2>
        <p><b>Secretariat:</b> Can see all CVE records owned by any Organization</p>"
  #swagger.parameters['$ref'] = [
    '#/components/parameters/cveRecordFilteredTimeModifiedLt',
    '#/components/parameters/cveRecordFilteredTimeModifiedGt',
    '#/components/parameters/cveState',
    '#/components/parameters/countOnly',
    '#/components/parameters/assignerShortName',
    '#/components/parameters/assigner',
    '#/components/parameters/apiEntityHeader',
    '#/components/parameters/apiUserHeader',
    '#/components/parameters/apiSecretHeader'
  ]
  #swagger.responses[200] = {
    description: 'A list of CVE records and pagination fields, only allowed by the Secretariat.',
    content: {
      "application/json": {
        schema: {
          type: 'object',
          properties: {
            totalCount: {
              type: 'integer',
              format: 'int32',
              description: 'Total CVE records found'
            },
            itemsPerPage: {
              type: 'integer',
              format: 'int32',
              description: 'Number of CVE records in a page'
            },
            pageCount: {
              type: 'integer',
              format: 'int32',
              description: 'Total number of pages'
            },
            currentPage: {
              type: 'integer',
              format: 'int32',
              description: 'Current page'
            },
            prevPage: {
              type: 'integer',
              format: 'int32',
              description: 'Previous page'
            },
            nextPage: {
              type: 'integer',
              format: 'int32',
              description: 'Next page'
            },
            cveRecords: {
              type: 'object',
              anyOf: [
                {
                  $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_public.schema'
                },
                {
                  $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_reject.schema'
                }
              ]
            }
          }
        }
      }
    }
  }
  #swagger.responses[400] = {
    description: 'Bad Request',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorBadInput' },
        examples: { errorBadInput: { $ref: '#/components/examples/errorBadInput' }}
      }
    }
  }
  #swagger.responses[401] = {
    description: 'Not Authenticated',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}
      }
    }
  }
  #swagger.responses[403] = {
    description: 'Forbidden',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}
      }
    }
  }
  #swagger.responses[404] = {
    description: 'Not Found',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}
      }
    }
  }
  #swagger.responses[500] = {
    description: 'Internal Server Error',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/internalServerError' }}
      }
    }
  }
  */
  query(['page']).optional().isInt({ min: CONSTANTS.PAGINATOR_PAGE }),
  query(['time_modified.lt']).optional().isString().trim().escape().customSanitizer(val => { return toDate(val) }).not().isEmpty(),
  query(['time_modified.gt']).optional().isString().trim().escape().customSanitizer(val => { return toDate(val) }).not().isEmpty(),
  query(['state']).optional().isString().trim().escape().customSanitizer(val => { return val.toUpperCase() }).isIn(CHOICES),
  query(['count_only']).optional().isBoolean(),
  query(['assignerShortName']).optional().isString().trim().escape().notEmpty(),
  query(['assigner']).optional().isString().trim().escape().notEmpty(),
  parseError,
  parseGetParams,
  controller.CVE_GET_FILTERED)
router.post('/cve/:id',
  /*
  #swagger.tags = ['CVE Record']
  #swagger.operationId = 'cveSubmit'
  #swagger.summary = "Creates a CVE Record by ID (This endpoint can only be used by the Secretariat.)"
  #swagger.description = "
        This endpoint is an internal admin endpoint restricted to the Secretariat.
        <h2>Access Control</h2>
        <p>At least one of the following roles are needed to access the endpoint:</p>
        <p>- <b>SECRETARIAT:</b> The user must belong to an Organization with the “SECRETARIAT” role</p>
        <h2>Expected Behavior</h2>
        <p><b>Secretariat:</b> Can create a CVE record owned by any Organization</p>"
  #swagger.parameters['id'] = { description: 'The CVE ID for which the record is being submitted.' }
  #swagger.parameters['$ref'] = [
    '#/components/parameters/apiEntityHeader',
    '#/components/parameters/apiUserHeader',
    '#/components/parameters/apiSecretHeader'
  ]
  #swagger.requestBody = {
    required: true,
    content: {
      "application/json": {
        schema:{
          anyOf:[
            {
              $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_public.schema'
            },
            {
              $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_public.schema'
            }
          ]
        }
      }
    }
  }
  #swagger.responses[200] = {
    description: 'The requested CVE record is returned.',
    content: {
      "application/json": {
        schema: {
          type: 'object',
          properties: {
            message: {
              type: 'string',
              description: 'Success description'
            },
            created: {
              type: 'object',
              anyOf: [
                {
                  $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_public.schema'
                },
                {
                  $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_reject.schema'
                }
              ]
            }
          }
        }
      }
    }
  }
  #swagger.responses[400] = {
    description: 'Bad Request',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorBadInput' },
        examples: { errorBadInput: { $ref: '#/components/examples/errorBadInput' }}
      }
    }
  }
  #swagger.responses[401] = {
    description: 'Not Authenticated',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}
      }
    }
  }
  #swagger.responses[403] = {
    description: 'Forbidden',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}
      }
    }
  }
  #swagger.responses[404] = {
    description: 'Not Found',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}
      }
    }
  }
  #swagger.responses[500] = {
    description: 'Internal Server Error',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/internalServerError' }}
      }
    }
  }
  */
  mw.onlySecretariat,
  mw.validateUser,
  mw.validateCveJsonSchema,
  param(['id']).isString().matches(/^CVE-[0-9]{4}-[0-9]{4,}$/i),
  parseError,
  parsePostParams,
  controller.CVE_SUBMIT)
router.put('/cve/:id',
  /*
  #swagger.tags = ['CVE Record']
  #swagger.operationId = 'cveUpdateSingle'
  #swagger.summary = "Updates a CVE Record by ID (This endpoint can only be used by the Secretariat.)"
  #swagger.description = "
        This endpoint is an internal admin endpoint restricted to the Secretariat.
        <h2>Access Control</h2>
        <p>At least one of the following roles are needed to access the endpoint:</p>
        <p>- <b>SECRETARIAT:</b> The user must belong to an Organization with the “SECRETARIAT” role</p>
        <h2>Expected Behavior</h2>
        <p><b>Secretariat:</b> Can update a CVE record owned by any Organization</p>"
  #swagger.parameters['id'] = { description: 'The CVE ID for which the record is being updated.' }
  #swagger.parameters['$ref'] = [
    '#/components/parameters/apiEntityHeader',
    '#/components/parameters/apiUserHeader',
    '#/components/parameters/apiSecretHeader'
  ]
  #swagger.requestBody = {
    required: true,
    content: {
      "application/json": {
        schema:{
          anyOf:[
            {
              $ref: 'http://localhost:3000/api-docs/schemas/json5-minimum-schema.json'
            },
            {
              $ref: 'http://localhost:3000/api-docs/schemas/json5-minimum-schema.json'
            }
          ]
        }
      }
    }
  }
  #swagger.responses[200] = {
    description: 'Returns the CVE record updated.',
    content: {
      "application/json": {
        schema: {
          type: 'object',
          properties: {
            message: {
              type: 'string',
              description: 'Success description'
            },
            updated: {
              type: 'object',
              anyOf: [
                {
                  $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_public.schema'
                },
                {
                  $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_reject.schema'
                }
              ]
            }
          }
        }
      }
    }
  }
  #swagger.responses[400] = {
    description: 'Bad Request',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorBadInput' },
        examples: { errorBadInput: { $ref: '#/components/examples/errorBadInput' }}
      }
    }
  }
  #swagger.responses[401] = {
    description: 'Not Authenticated',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}
      }
    }
  }
  #swagger.responses[403] = {
    description: 'Forbidden',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}
      }
    }
  }
  #swagger.responses[404] = {
    description: 'Not Found',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}
      }
    }
  }
  #swagger.responses[500] = {
    description: 'Internal Server Error',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/internalServerError' }}
      }
    }
  }
  */
  mw.onlySecretariat,
  mw.validateUser,
  mw.validateCveJsonSchema,
  param(['id']).isString().matches(/^CVE-[0-9]{4}-[0-9]{4,}$/i),
  parseError,
  parsePostParams,
  controller.CVE_UPDATE_SINGLE)

router.post('/cve/:id/cna',
  /*
  #swagger.tags = ['CVE Record']
  #swagger.operationId = 'cveCnaCreateSingle'
  #swagger.summary = "Creates a CVE Record by ID (This endpoint is to be used by CNAs.)"
  #swagger.description = "
        <h2>Access Control</h2>
        <p>No roles needed to access the endpoint</p>
        <h2>Expected Behavior</h2>
        <p><b>Admin User:</b> Can submit CVE records for CVE IDs that are owned by the organization</p>
        <p><b>Regular User:</b> Can submit CVE records for CVE IDs that are owned by the organization</p>"
  #swagger.parameters['id'] = { description: 'The CVE ID for which the record is being created.' }
  #swagger.parameters['$ref'] = [
    '#/components/parameters/apiEntityHeader',
    '#/components/parameters/apiUserHeader',
    '#/components/parameters/apiSecretHeader'
  ]
  #swagger.requestBody = {
    required: true,
    content: {
      "application/json": {
        schema:{
          anyOf:[
            {
              $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_public.schema'
            },
            {
              $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_public.schema'
            }
          ]
        }
      }
    }
  }
  #swagger.responses[200] = {
    description: 'The created CVE record is returned.',
    content: {
      "application/json": {
        schema: {
          type: 'object',
          properties: {
            message: {
              type: 'string',
              description: 'Success description'
            },
            created: {
              type: 'object',
              anyOf: [
                {
                  $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_public.schema'
                },
                {
                  $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_reject.schema'
                }
              ]
            }
          }
        }
      }
    }
  }
  #swagger.responses[400] = {
    description: 'Bad Request',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorBadInput' },
        examples: { errorBadInput: { $ref: '#/components/examples/errorBadInput' }}
      }
    }
  }
  #swagger.responses[401] = {
    description: 'Not Authenticated',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}
      }
    }
  }
  #swagger.responses[403] = {
    description: 'Forbidden',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}
      }
    }
  }
  #swagger.responses[404] = {
    description: 'Not Found',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}
      }
    }
  }
  #swagger.responses[500] = {
    description: 'Internal Server Error',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/internalServerError' }}
      }
    }
  }
  */
  mw.onlyCnas,
  mw.validateUser,
  validateCveCnaContainerJsonSchema,
  param(['id']).isString().matches(/^CVE-[0-9]{4}-[0-9]{4,}$/i),
  parseError,
  parsePostParams,
  mw.cnaMustOwnID,
  controller.CVE_SUBMIT_CNA)

router.put('/cve/:id/cna',
  /*
  #swagger.tags = ['CVE Record']
  #swagger.operationId = 'cveCnaUpdateSingle'
  #swagger.summary = "Update a CVE Record by ID (This endpoint is to be used by CNAs.)"
  #swagger.description = "
        <h2>Access Control</h2>
        <p>No roles needed to access the endpoint</p>
        <h2>Expected Behavior</h2>
        <p><b>Admin User:</b> Can submit CVE records for CVE IDs that are owned by the organization</p>
        <p><b>Regular User:</b> Can submit CVE records for CVE IDs that are owned by the organization</p>"
  #swagger.parameters['id'] = { description: 'The CVE ID for which the record is being updated.' }
  #swagger.parameters['$ref'] = [
    '#/components/parameters/apiEntityHeader',
    '#/components/parameters/apiUserHeader',
    '#/components/parameters/apiSecretHeader'
  ]
  #swagger.requestBody = {
    required: true,
    content: {
      "application/json": {
        schema:{
          anyOf:[
            {
              $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_public.schema'
            },
            {
              $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_public.schema'
            }
          ]
        }
      }
    }
  }
  #swagger.responses[200] = {
    description: 'Returns the CVE record updated.',
    content: {
      "application/json": {
        schema: {
          type: 'object',
          properties: {
            message: {
              type: 'string',
              description: 'Success description'
            },
            updated: {
              type: 'object',
              anyOf: [
                {
                  $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_public.schema'
                },
                {
                  $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_reject.schema'
                }
              ]
            }
          }
        }
      }
    }
  }
  #swagger.responses[400] = {
    description: 'Bad Request',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorBadInput' },
        examples: { errorBadInput: { $ref: '#/components/examples/errorBadInput' }}
      }
    }
  }
  #swagger.responses[401] = {
    description: 'Not Authenticated',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}
      }
    }
  }
  #swagger.responses[403] = {
    description: 'Forbidden',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}
      }
    }
  }
  #swagger.responses[404] = {
    description: 'Not Found',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}
      }
    }
  }
  #swagger.responses[500] = {
    description: 'Internal Server Error',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/internalServerError' }}
      }
    }
  }
  */
  mw.onlyCnas,
  mw.validateUser,
  validateCveCnaContainerJsonSchema,
  param(['id']).isString().matches(/^CVE-[0-9]{4}-[0-9]{4,}$/i),
  parseError,
  parsePostParams,
  mw.cnaMustOwnID,
  controller.CVE_UPDATE_CNA)

router.post('/cve/:id/reject',
  /*
  #swagger.tags = ['CVE Record']
  #swagger.operationId = 'cveCnaCreateReject'
  #swagger.summary = "Create a CVE Record rejection by ID (This endpoint is to be used by CNAs.)"
  #swagger.description = "
        <h2>Access Control</h2>
        <p>No roles needed to access the endpoint</p>
        <h2>Expected Behavior</h2>
        <p><b>Admin User:</b> Can submit CVE records for CVE IDs that are owned by the organization</p>
        <p><b>Regular User:</b> Can submit CVE records for CVE IDs that are owned by the organization</p>"
  #swagger.parameters['id'] = { description: 'The CVE ID for which the record is being rejected.' }
  #swagger.parameters['$ref'] = [
    '#/components/parameters/apiEntityHeader',
    '#/components/parameters/apiUserHeader',
    '#/components/parameters/apiSecretHeader'
  ]
  #swagger.requestBody = {
    required: true,
    content: {
      "application/json": {
        schema:{
          anyOf:[
            {
              $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_public.schema'
            },
            {
              $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_public.schema'
            }
          ]
        }
      }
    }
  }
  #swagger.responses[200] = {
    description: 'Returns the CVE record updated.',
    content: {
      "application/json": {
        schema: {
          type: 'object',
          properties: {
            message: {
              type: 'string',
              description: 'Success description'
            },
            updated: {
              type: 'object',
              anyOf: [
                {
                  $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_public.schema'
                },
                {
                  $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_reject.schema'
                }
              ]
            }
          }
        }
      }
    }
  }
  #swagger.responses[400] = {
    description: 'Bad Request',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorBadInput' },
        examples: { errorBadInput: { $ref: '#/components/examples/errorBadInput' }}
      }
    }
  }
  #swagger.responses[401] = {
    description: 'Not Authenticated',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}
      }
    }
  }
  #swagger.responses[403] = {
    description: 'Forbidden',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}
      }
    }
  }
  #swagger.responses[404] = {
    description: 'Not Found',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}
      }
    }
  }
  #swagger.responses[500] = {
    description: 'Internal Server Error',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/internalServerError' }}
      }
    }
  }
  */
  mw.onlyCnas,
  mw.validateUser,
  validateRejectBody,
  param(['id']).isString().matches(/^CVE-[0-9]{4}-[0-9]{4,}$/i),
  body(['cnaContainer.rejectedReasons']).isArray().custom((arr) => {
    if (onlyOneEnglishDescription(arr) !== 1) {
      throw new Error(400, 'Bad request, more than one English description found')
    }
    return true
  }),
  body(['cnaContainer.replacedBy']).optional().isArray(),
  parseError,
  parsePostParams,
  mw.cnaMustOwnID,
  controller.CVE_REJECT_RECORD)

router.put('/cve/:id/reject',
  /*
  #swagger.tags = ['CVE Record']
  #swagger.operationId = 'cveCnaUpdateReject'
  #swagger.summary = "Update a CVE Record rejection by ID (This endpoint is to be used by CNAs.)"
  #swagger.description = "
        <h2>Access Control</h2>
        <p>No roles needed to access the endpoint</p>
        <h2>Expected Behavior</h2>
        <p><b>Admin User:</b> Can submit CVE records for CVE IDs that are owned by the organization</p>
        <p><b>Regular User:</b> Can submit CVE records for CVE IDs that are owned by the organization</p>"
  #swagger.parameters['id'] = { description: 'The CVE ID for which the record is being rejected.' }
  #swagger.parameters['$ref'] = [
    '#/components/parameters/apiEntityHeader',
    '#/components/parameters/apiUserHeader',
    '#/components/parameters/apiSecretHeader'
  ]
  #swagger.requestBody = {
    required: true,
    content: {
      "application/json": {
        schema:{
          anyOf:[
            {
              $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_public.schema'
            },
            {
              $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_public.schema'
            }
          ]
        }
      }
    }
  }
  #swagger.responses[200] = {
    description: 'Returns the CVE record updated.',
    content: {
      "application/json": {
        schema: {
          type: 'object',
          properties: {
            message: {
              type: 'string',
              description: 'Success description'
            },
            updated: {
              type: 'object',
              anyOf: [
                {
                  $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_public.schema'
                },
                {
                  $ref: 'https://raw.githubusercontent.com/CVEProject/cve-schema/master/schema/v4.0/CVE_JSON_4.0_min_reject.schema'
                }
              ]
            }
          }
        }
      }
    }
  }
  #swagger.responses[400] = {
    description: 'Bad Request',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorBadInput' },
        examples: { errorBadInput: { $ref: '#/components/examples/errorBadInput' }}
      }
    }
  }
  #swagger.responses[401] = {
    description: 'Not Authenticated',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}
      }
    }
  }
  #swagger.responses[403] = {
    description: 'Forbidden',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}
      }
    }
  }
  #swagger.responses[404] = {
    description: 'Not Found',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/errorGeneric' }}
      }
    }
  }
  #swagger.responses[500] = {
    description: 'Internal Server Error',
    content: {
      "application/json": {
        schema: { $ref: '#/components/schemas/errorGeneric' },
        examples: { errorGeneric: { $ref: '#/components/examples/internalServerError' }}
      }
    }
  }
  */
  mw.onlyCnas,
  mw.validateUser,
  validateRejectBody,
  param(['id']).isString().matches(/^CVE-[0-9]{4}-[0-9]{4,}$/i),
  body(['cnaContainer.rejectedReasons']).isArray().custom((arr) => {
    if (onlyOneEnglishDescription(arr) !== 1) {
      throw new Error(400, 'Bad request, more than one English description found')
    }
    return true
  }),
  body(['cnaContainer.replacedBy']).optional().isArray(),
  parseError,
  parsePostParams,
  mw.cnaMustOwnID,
  controller.CVE_REJECT_EXISTING_CVE)

module.exports = router
