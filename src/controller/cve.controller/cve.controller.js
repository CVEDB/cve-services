const Cve = require('../../model/cve')
const logger = require('../../middleware/logger')
const errors = require('./error')
const error = new errors.CveControllerError()
const CONSTANTS = require('../../constants')

// Creates a new CVE only if it does not exists for the specified CVE ID in the request body. If it exists, it does not update the CVE.
async function submitCve (req, res, next) {
  try {
    const newCve = new Cve({ cve: req.ctx.body })
    const id = req.ctx.params.id
    const cveId = newCve.cve.CVE_data_meta.ID
    const cveRepo = req.ctx.repositories.getCveRepository()
    const cveIdRepo = req.ctx.repositories.getCveIdRepository()
    const orgRepo = req.ctx.repositories.getOrgRepository()
    let returned = false

    // the cve id provided in the body must match the cve id provided in the URL params
    if (id !== cveId) {
      returned = true
      return res.status(400).json(error.cveIdMismatch())
    }

    // check that cve id exists
    let result = await cveIdRepo.findOneByCveId(id)
    if ((!result || result.state === CONSTANTS.CVE_STATES.AVAILABLE) && !returned) {
      returned = true
      return res.status(403).json(error.cveDne())
    }

    // ASK: should we create CVE records with status 'RESERVED'?

    // check that cve record does not exist
    result = await cveRepo.findOneByCveId(id)
    if (!returned && result) {
      returned = true
      return res.status(404).json(error.cveRecordExists())
    }

    // create cve record in MongoDB if it doesn't exist
    await cveRepo.updateByCveId(cveId, newCve, { upsert: true })

    const responseMessage = {
      message: cveId + ' record was successfully created.',
      created: newCve.cve
    }

    const payload = {
      action: 'create_cve_record',
      change: cveId + ' record was successfully created.',
      req_UUID: req.ctx.uuid,
      org_UUID: await orgRepo.getOrgUUID(req.ctx.org),
      cve: cveId
    }
    const userRepo = req.ctx.repositories.getUserRepository()
    payload.user_UUID = await userRepo.getUserUUID(req.ctx.user, payload.org_UUID)
    logger.info(JSON.stringify(payload))
    return res.status(200).json(responseMessage)
  } catch (err) {
    next(err)
  }
}

// Updates a CVE if one exists for the specified CVE ID
async function updateCve (req, res) {
  const cve = req.body
  const cveId = req.params.id

  if (cveId !== cve.CVE_data_meta.ID) {
    return res.status(400).json({ message: cveId + ' parameter does not match ' + cve.CVE_data_meta.ID + ' in the JSON body.' })
  }

  const newCve = new Cve({ cve: cve })

  // Find and Update CVE in MongoDB
  Cve.findOneAndUpdate()
    .byCveId(cveId)
    .updateOne(newCve)
    .exec((err, result) => {
      if (err) {
        logger.warn('An error ocurred in MongoDB. ' + cveId + ' was not updated in the database.')
        logger.error(err.stack)
        return res.status(500).send(CONSTANTS.SERVER_RESPONSES.Internal_Server_Error)
      }

      if (result.n === 0) {
        logger.info(cveId + ' does not exist.')
        return res.status(404).json({ message: cveId + ' does not exist.' })
      }

      logger.info(cveId + ' has been updated.')
      return res.status(200).json({ message: cveId + ' has been updated.' })
    })
}

module.exports = {
  CVE_SUBMIT: submitCve,
  CVE_UPDATE_SINGLE: updateCve
}
