/*
 * used to populate the Cve collection without dropping/updating any other
 * collection
 */

const config = require('config')

const express = require('express')
const app = express()
const mongoose = require('mongoose')

const dataUtils = require('../utils/data')
const errors = require('../utils/error')
const logger = require('../middleware/logger')
const Cve = require('../model/cve')

const error = new errors.IDRError()

require('dotenv').config() // This enables us to read from the .env file.

// Body Parser Middleware
app.use(express.json()) // Allows us to handle raw JSON data
app.use(express.urlencoded({ extended: false })) // Allows us to handle url encoded data
// Make mongoose connection available globally
global.mongoose = mongoose

// construct MongoDB connection string
// assumes that host, port, database are always defined in default config, but
// that username and password may not be
const appEnv = process.env.NODE_ENV
let dbUser, dbPassword

if (process.env.MONGO_USER && process.env.MONGO_PASSWORD) {
  dbUser = process.env.MONGO_USER
  dbPassword = process.env.MONGO_PASSWORD
} else {
  dbUser = config.has(`${appEnv}.username`) ? config.get(`${appEnv}.username`) : false
  dbPassword = config.has(`${appEnv}.password`) ? config.get(`${appEnv}.password`) : false
}

const dbHost = process.env.MONGO_HOST ? process.env.MONGO_HOST : config.get(`${appEnv}.host`)
const dbPort = process.env.MONGO_PORT ? process.env.MONGO_PORT : config.get(`${appEnv}.port`)
const dbName = config.get(`${appEnv}.database`)
const dbLoginPrepend = (dbUser && dbPassword) ? `${dbUser}:${dbPassword}@` : ''
const dbConnectionStr = `mongodb://${dbLoginPrepend}${dbHost}:${dbPort}/${dbName}`

// Connect to MongoDB database
mongoose.connect(dbConnectionStr, {
  useNewUrlParser: true,
  useUnifiedTopology: false,
  useFindAndModify: false
})

// database connection
const db = mongoose.connection

db.on('error', () => {
  console.error.bind(console, 'Connection Error: Something went wrong!')
  logger.error(error.connectionError())
})

db.once('open', async () => {
  logger.info(`Successfully connected to database ${dbName} at ${dbHost}:${dbPort}`)

  // user needs to agree to an action that drops collections
  const userInput = dataUtils.getUserPopulateInput()

  // dropping Cve collection
  // this may be more complex than necessary, but is kept similar to `src/scripts/populate.js`
  if (userInput.toLowerCase() === 'y') {
    let names = []
    let collections = await db.db.listCollections().toArray()
    collections.forEach(collection => {
      names.push(collection.name)
    })

    if (names.includes('Cve')) {
      await db.dropCollection('Cve')
    }

    names = []
    collections = await db.db.listCollections().toArray()
    collections.forEach(collection => {
      names.push(collection.name)
    })

    if (!names.includes('Cve')) {
      await dataUtils.populateCollection(
        './datadump/pre-population/cves.json',
        Cve
      )
      logger.info('Successfully populated CVE records!')
    } else {
      logger.error(
        'The database was not populated because ' +
        'some of the collections were not deleted.'
      )
    }
  }

  mongoose.connection.close()
})

