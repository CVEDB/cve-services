/*
 * used to populate or re-populate a MongoDB-compatible document
 * database with static fixtures at `cve-services/datadump/pre-population`
 */

const config = require('config')
const express = require('express')
const app = express()
const mongoose = require('mongoose')

const dataUtils = require('../utils/data')
const errors = require('../utils/error')
const logger = require('../middleware/logger')
const CveIdRange = require('../model/cve-id-range')
const CveId = require('../model/cve-id')
const Cve = require('../model/cve')
const Org = require('../model/org')
const User = require('../model/user')

const error = new errors.IDRError()

require('dotenv').config() // This enables us to read from the .env file.

const populateTheseCollections = {
  'Cve': Cve,
  'Cve-Id-Range': CveIdRange,
  'Cve-Id': CveId,
  'User': User,
  'Org': Org
}

// Body Parser Middleware
app.use(express.json()) // Allows us to handle raw JSON data
app.use(express.urlencoded({ extended: false })) // Allows us to handle url encoded data
// Make mongoose connection available globally
global.mongoose = mongoose

// construct MongoDB connection string
// assumes that host, port, database are always defined in default config, but
// that username and password may not be
const appEnv = process.env.NODE_ENV
let dbUser, dbPassword

if (process.env.MONGO_USER && process.env.MONGO_PASSWORD) {
  dbUser = process.env.MONGO_USER
  dbPassword = process.env.MONGO_PASSWORD
} else {
  dbUser = config.has(`${appEnv}.username`) ? config.get(`${appEnv}.username`) : false
  dbPassword = config.has(`${appEnv}.password`) ? config.get(`${appEnv}.password`) : false
}

const dbHost = process.env.MONGO_HOST ? process.env.MONGO_HOST : config.get(`${appEnv}.host`)
const dbPort = process.env.MONGO_PORT ? process.env.MONGO_PORT : config.get(`${appEnv}.port`)
const dbName = config.get(`${appEnv}.database`)
const dbLoginPrepend = (dbUser && dbPassword) ? `${dbUser}:${dbPassword}@` : ''
const dbConnectionStr = `mongodb://${dbLoginPrepend}${dbHost}:${dbPort}/${dbName}`

// Connect to MongoDB database
mongoose.connect(dbConnectionStr, {
  useNewUrlParser: true,
  useUnifiedTopology: false,
  useFindAndModify: false
})

const db = mongoose.connection

db.on('error', () => {
  console.error.bind(console, 'Connection Error: Something went wrong!')
  logger.error(error.connectionError())
})

db.once('open', async () => {
  logger.info(`Successfully connected to database ${dbName} at ${dbHost}:${dbPort}`)

  // Ask user to confirm pre-population
  // This will prep MongoDB by removing the Cve, Cve-Id-Range, Cve-Id,
  // Org, and User collections
  /*const prompt = require('prompt-sync')({ sigint: true })
  let userInput = prompt(
    `Are you sure you wish to pre-populate the database for the ${appEnv} environment? ` +
    "Doing so will drop the 'Cve', 'Cve-Id-Range', 'Cve-Id', 'Org' and 'User' collections " +
    `in the ${dbName} database. (y/n) `
  )
  while (userInput.toLowerCase() !== 'n' && userInput.toLowerCase() !== 'y') {
    console.log('Unrecognized Input')
    userInput = prompt(
      `Do you wish to pre-populate the database for the ${appEnv} environment? ` +
      "Doing so will drop the 'Cve', 'Cve-Id-Range', 'Cve-Id', 'Org' and 'User' collections " +
      `in the ${dbName} database. (y/n) `
    )
  }*/
  let userInput = 'y'

  // drops and re-populates collections
  if (userInput.toLowerCase() === 'y') {
    let names = []
    let collections = await db.db.listCollections().toArray()
    collections.forEach(collection => {
      names.push(collection.name)
    })

    
    for (const name in populateTheseCollections) {
      if (names.includes(name)) {
        logger.info(`Dropping ${name} collection !!!`)
        await db.dropCollection(name)
      }
    }

    names = []
    collections = await db.db.listCollections().toArray()
    collections.forEach(collection => {
      names.push(collection.name)
    })

    if (!names.includes('Cve-Id-Range') && !names.includes('Cve-Id') && !names.includes('Cve') &&
        !names.includes('Org') && !names.includes('User')) {
      // Org
      await dataUtils.populateCollection(
        './datadump/pre-population/orgs.json',
        Org, dataUtils.newOrgTransform
      )

      // User, depends on Org
      const hash = await dataUtils.preprocessUserSecrets()
      await dataUtils.populateCollection(
        './datadump/pre-population/users.json',
        User, dataUtils.newUserTransform, hash
      )

      let populatePromises = []

      // CVE ID Range
      populatePromises.push(dataUtils.populateCollection(
        './datadump/pre-population/cve-ids-range.json',
        CveIdRange
      ))

      // CVE
      populatePromises.push(dataUtils.populateCollection(
        './datadump/pre-population/cves.json',
        Cve
      ))

      // CVE ID, depends on User and Org
      populatePromises.push(dataUtils.populateCollection(
        './datadump/pre-population/cve-ids.json',
        CveId, dataUtils.newCveIdTransform
      ))

      // don't close database connection until all remaining populate
      // promises are resolved
      Promise.all(populatePromises).then(function () {
        logger.info('Successfully populated the database!')
        mongoose.connection.close()
      })
    } else {
      logger.error(
        'The database was not populated because ' +
        'some of the collections were not deleted.')
    }
  }
})
